"""
    clear_hamster_output(; output_files=["hamster_out.h5", "hamster.out", "Es.dat", "vs.dat"])

Delete output files generated by Hamster.

# Keyword Arguments
- `output_files::Vector{String}`: List of filenames to remove. Defaults to
  `["hamster_out.h5", "hamster.out", "Es.dat", "vs.dat"]`.
"""
function clear_hamster_output(; output_files=["hamster_out.h5", "hamster.out", "Es.dat", "vs.dat"])
    for file in output_files
        if isfile(file); rm(file, force=true); end
    end
end

"""
    generate_output(conf::Config)

Generates the main output file `hamster.out` with initial run information.

# Arguments
- `conf::Config`: A configuration object containing parameters and settings for the current run.

# Details
This function performs the following tasks:
1. Opens (creates) the file `hamster.out` for writing.
2. Writes the current date and time to the file to record when the Hamster run started.
3. Writes the list of unique hostnames.
"""
function generate_output(conf::Config=get_empty_config(); hostnames=hostnames)
    open("hamster.out", "w") do hamster_out
        print_hamster(hamster_out)

        # Write current date and time of day
        dt = now(); date = Date(dt); time = Time(dt)
        println(hamster_out, "Starting Hamster run on $date at $time.")
        hostlist = string.(unique(hostnames))
        hostlist = replace("$hostlist", "["=>"", "]"=>"")
        println(hamster_out, "  Hamster is running on host(s): $hostlist")
        write_separator(hamster_out)
    end
end

"""
    write_separator(hamster_out)

Write a separator line of `L` times `char`` to the `io_stream`.

# Arguments
- `io_stream::IO`: The io stream to which the separator will be written.
"""
write_separator(io_stream; char='=', L=80) = println(io_stream, char^L)

"""
    append_output_block(block_title, block_tags, block_values; filename="hamster.out")

Append a formatted block of output to the specified file, typically used for logging or report generation.

# Arguments
- `block_title::AbstractString`: The title of the block to be appended. This title will be written as a header.
- `block_tags::AbstractVector{<:AbstractString}`: A vector of tags or labels corresponding to the block's values.
- `block_values::AbstractVector{<:Any}`: A vector of values corresponding to the tags, representing the content to be written.
- `filename::AbstractString`: The name of the file to which the block will be appended. Defaults to `"hamster.out"`.

# Usage
- This function checks if the specified file exists. If it does, it appends a titled block of information with tags and corresponding values.
- Each tag-value pair is written on a new line using the `write_output_line` function.
- A separator line is written after the block for clarity.
"""
function append_output_block(block_title, block_tags, block_values; filename="hamster.out")
    if filename in readdir()
        hamster_out = open("hamster.out", "a")
        println(hamster_out, block_title)
        for (tag, value) in zip(block_tags, block_values)
            write_output_line(hamster_out, tag, value)
        end
        write_separator(hamster_out)
        println(hamster_out, "")
        close(hamster_out)
    end
end

function write_block_summary(block_label, filename="hamster.out"; kwargs...)
    if filename in readdir()
        open(filename, "a") do io
            write(io, "  $block_label Summary\n")
            write_separator(io, char='-')
            for (key, value) in kwargs
                key_string = rpad(replace("      $key:", "["=>"", "]"=>""), 34)
                value_string = rpad(replace("      $value", "["=>"", "]"=>""), 40)
                write(io, "$key_string $value_string\n")
            end
            write_separator(io)
        end
    end
end

"""
    write_output_line(dyntb_out, key, value, L)

Write a line with `key` and `value` pair to the output file `dyntb_out`.
"""
function write_output_line(hamster_out, key, value; L=25)
    key_string = L-length(key) < 0 ? string(key[1:L]) : string(key)
    value_string = L+15-length(value) < 0 ? string(value[1:L]) : string(value)
    Lk = length(key_string); Lv = length(value_string)
    println(hamster_out, "   ", key_string*" "^(L-Lk), " = ", " "^(L+15-Lv)*value_string)
end

"""
    write_output_line(key, value, L)

Append a line with `key` and `value` pair to the output file `dyntb.out`.
"""
function append_output_line(key, value; L=25)
    hamster_out = open("hamster.out", "a")
    Lk = length(key); Lv = length(value)
    println(hamster_out, "   ", key*" "^(L-Lk), " = ", " "^(L+15-Lv)*value)
    close(dyntb_out)
end