var documenterSearchIndex = {"docs":
[{"location":"examples/model_eval/#standard-gaas","page":"Standard run for GaAs","title":"Standard run for GaAs","text":"","category":"section"},{"location":"examples/model_eval/","page":"Standard run for GaAs","title":"Standard run for GaAs","text":"If no optimization blocks are defined, Hamster defaults to a standard run, computing the Hamiltonian and eigenvalues. In this case, an optimized parameter set must be provided via the init_params tag. The distance-dependence functions can either be supplied directly or re-interpolated as needed. Note that the cutoff rcut and the distance-dependence parameters alpha must remain consistent across calculations; otherwise, the results may be erroneous. Input files are found here.","category":"page"},{"location":"examples/model_eval/","page":"Standard run for GaAs","title":"Standard run for GaAs","text":"For each material to be modeled, an orbital basis must be specified. Hybrid orbitals are a special case since they are identical apart from their spatial orientation. The nnaxes argument can be used to automatically set these orientations based on the bonding axes between an atom and its nearest neighbors (e.g., As in this case).","category":"page"},{"location":"conf/general_tags/#General-Options","page":"General Options","title":"General Options","text":"","category":"section"},{"location":"conf/general_tags/","page":"General Options","title":"General Options","text":"The general options are placed inside an Options block:","category":"page"},{"location":"conf/general_tags/","page":"General Options","title":"General Options","text":"begin Options\n    ...\nend","category":"page"},{"location":"conf/general_tags/#Hamster.get_diag_method-Tuple{Config}","page":"General Options","title":"Hamster.get_diag_method","text":"diag_method=shift-invert\n\nThe diag_method tag sets the method to be used for calculating eigenvalues when sp_diag=true, ignored otherwise.\n\nPossible options:\n\nshift-invert (default): call eigs function from Arpack.\nkrylov-schur: call eigsolve function from KrylovKit.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_eig_target-Tuple{Config}","page":"General Options","title":"Hamster.get_eig_target","text":"eig_target=0.\n\nThe eig_target::Float tag sets the target energy when using a sparse eigensolver.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_init_params-Tuple{Config}","page":"General Options","title":"Hamster.get_init_params","text":"init_params = ones\n\nThe init_params tag determines how the tight-binding parameters are initialized.  \n\nPossible options:\n\nfilename.dat: initialize from a file named filename.dat.\nones: initialize all parameters to 1 (default).\nzeros: initialize all parameters to 0.\nrand: initialize parameters randomly between 0 and 1.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_kpoints_file-Tuple{Config}","page":"General Options","title":"Hamster.get_kpoints_file","text":"kpoints=gamma\n\nThe kpoints::String tag specifies the file or method used to define the set of k-points.\n\nPossible options:\n\ngamma: use only the Gamma point (default).\nEIGENVAL: read k-points from a VASP EIGENVAL file.\nfilename.h5: read k-points from the \"k-points\" field of an HDF5 file.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_neig-Tuple{Config}","page":"General Options","title":"Hamster.get_neig","text":"neig=6 (only if sp_diag=true)\n\nThe neig::Int tag sets the number of eigenvalues that are calculated when using a sparse eigensolver.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_nhamster-Tuple{Config}","page":"General Options","title":"Hamster.get_nhamster","text":"nhamster=1\n\nThe nhamster tag sets the number of Hamster processes to be spawned for parallel tasks.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_nthreads_bands-Tuple{Config}","page":"General Options","title":"Hamster.get_nthreads_bands","text":"nthreads_bands=JULIANUMTHREADS\n\nThe nthreads_bands::Int tag sets the number of tasks to work on energy bands simultaneously.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_nthreads_blas-Tuple{Config}","page":"General Options","title":"Hamster.get_nthreads_blas","text":"nthreads_blas=1\n\nThe nthreads_blas::Int tag sets the number of threads used by the BLAS library.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_nthreads_kpoints-Tuple{Config}","page":"General Options","title":"Hamster.get_nthreads_kpoints","text":"nthreads_kpoints=JULIANUMTHREADS\n\nThe nthreads_kpoints::Int tag sets the number of tasks to work on kpoints simultaneously.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_save_vecs-Tuple{Config}","page":"General Options","title":"Hamster.get_save_vecs","text":"save_vecs=false\n\nThe save_vecs::Bool tag determines whether the eigenvectors are written to a file.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_skip_diag-Tuple{Config}","page":"General Options","title":"Hamster.get_skip_diag","text":"skip_diag=false\n\nIf skip_diag is set to true, no eigenvalues are computed for the Hamiltonian.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_system-Tuple{Config}","page":"General Options","title":"Hamster.get_system","text":"system=unknown\n\nThe system tag gives a name to the system under study.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_verbosity-Tuple{Config}","page":"General Options","title":"Hamster.get_verbosity","text":"verbosity=1\n\nThe verbosity parameter controls the amount of output printed to the console or written to output files.   A value of 0 disables most print statements.\n\nPossible options:\n\n0: minimal output; most print statements are suppressed.\n1: normal output volume (default).\n2: increased output; additional information is printed.\n3: maximum output; includes detailed debug information.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_write_hk-Tuple{Config}","page":"General Options","title":"Hamster.get_write_hk","text":"write_hk=false\n\nThe write_hk::Bool tag determines whether the Hamiltonians in k-space are written to a file.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_write_hr-Tuple{Config}","page":"General Options","title":"Hamster.get_write_hr","text":"write_hr=false\n\nThe write_hr::Bool tag determines whether the Hamiltonians in real-space are written to a file.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.set_seed!-Tuple{Config}","page":"General Options","title":"Hamster.set_seed!","text":"seed=none\n\nThe seed tag can be used to set a custom seed for RNG.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_Rmax-Tuple{Config}","page":"General Options","title":"Hamster.get_Rmax","text":"Rmax=1\n\nThe parameter Rmax sets the maximum magnitude of a translation vector used for periodic boundaty conditions. Note that this is determined automatically if rcut is set.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_grid_size-Tuple{Config}","page":"General Options","title":"Hamster.get_grid_size","text":"grid_size=rcut\n\nThe parameter grid_size determines the size of the cubes that are used to divide the simulation cell.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_poscar-Tuple{Config}","page":"General Options","title":"Hamster.get_poscar","text":"poscar=POSCAR\n\nThe parameter poscar sets the path to the POSCAR VASP file that defines the base system.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_rcut-Tuple{Config}","page":"General Options","title":"Hamster.get_rcut","text":"rcut=7.\n\nThe parameter rcut sets the cut-off radius beyond which all interactions are neglected. A cut-off radius of zero means all interactions are considered.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_rcut_tol-Tuple{Config}","page":"General Options","title":"Hamster.get_rcut_tol","text":"rcut_tol=1.\n\nThe parameter rcut_tol sets a tolerance for the cutoff function.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_interpolate_rllm-Tuple{Config}","page":"General Options","title":"Hamster.get_interpolate_rllm","text":"interpolate_rllm=true\n\nThe interpolate_rllm::Bool tag switches on interpolation of the distance dependence of overlaps.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_itp_Ninit-Tuple{Config}","page":"General Options","title":"Hamster.get_itp_Ninit","text":"itp_Ninit=20\n\nThe itp_Ninit::Int tag sets the number of initial points used for the adaptive interpolation.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_itp_Nmax-Tuple{Config}","page":"General Options","title":"Hamster.get_itp_Nmax","text":"itp_Nmax=1000\n\nThe itp_Nmax::Int tag sets the maximum number of points used for the adaptive interpolation.                            \n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_itp_tol-Tuple{Config}","page":"General Options","title":"Hamster.get_itp_tol","text":"itp_tol=1e-5\n\nThe itp_tol::Float tag sets the numerical tolerance for the adaptive interpolation.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_itp_xmax-Tuple{Config}","page":"General Options","title":"Hamster.get_itp_xmax","text":"itp_xmax=rcut+rcut_tol+1\n\nThe itp_xmax::Float tag sets the maximal x value used for the adaptive interpolation.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_itp_xmin-Tuple{Config}","page":"General Options","title":"Hamster.get_itp_xmin","text":"itp_xmin=0.\n\nThe itp_xmin::Float tag sets the minimal x value used for the adaptive interpolation.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_load_rllm-Tuple{Config}","page":"General Options","title":"Hamster.get_load_rllm","text":"load_rllm=false\n\nThe load_rllm::Bool tag decides whether the distance dependence is read from a file.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_onsite-Tuple{Config}","page":"General Options","title":"Hamster.get_onsite","text":"onsite=true\n\nThe onsite tag switches on the use of an extra parameter set for onsite interactions. If false, onsite matrix elements are computed evaluating the distance-dependence function at r=0.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_orbitals-Tuple{Config, Any}","page":"General Options","title":"Hamster.get_orbitals","text":"orbitals=[]\n\nThe orbitals tag specifies the set of orbitals used as the basis for the ion of the given type.   If left empty, no orbitals are assigned and the corresponding atomic species is excluded from the electronic structure.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_rllm_file-Tuple{Config}","page":"General Options","title":"Hamster.get_rllm_file","text":"rllm_file=rllm.dat\n\nThe rllm_file::String tag sets the name of the file where the distance dependence is stored.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_sepNN-Tuple{Config}","page":"General Options","title":"Hamster.get_sepNN","text":"sepNN=false\n\nThe sepNN::Bool tag switches on the use of an extra parameter set for nearest-neighbor interactions (compared to further away interactions). This can improve accuracy, however, may at the same time affect transferability negatively.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_tmethod-Tuple{Config}","page":"General Options","title":"Hamster.get_tmethod","text":"tmethod=rotation\n\nThe tmethod::String tag selects the method used to compute the Slater-Koster transformation matrix.   In practice, this choice should not affect the results, although rotation is slightly more efficient.\n\nPossible options:\n\nrotation: constructs the new reference system from the rotation matrix (default).\ngramschmidt: constructs the new reference system using a Gram-Schmidt procedure.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.SparsityMode","page":"General Options","title":"Hamster.SparsityMode","text":"Abstract type SparsityMode serves as a base for indicating the sparsity of matrices. These types enable dispatching based on the sparsity mode.\n\nSubtypes\n\nSparse <: SparsityMode: Represents matrices with sparse storage.\nDense <: SparsityMode: Represents matrices with dense storage.\n\n\n\n\n\n","category":"type"},{"location":"conf/general_tags/#Hamster.get_sp_diag-Tuple{Config}","page":"General Options","title":"Hamster.get_sp_diag","text":"sp_diag=false\n\nThe sp_diag::Bool tag switches between dense and sparse methods for matrix diagonalization (only affects Hᵏ and diagonalization). This can not be combined with optimization.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_sp_mode-Tuple{Config}","page":"General Options","title":"Hamster.get_sp_mode","text":"sp_mode=false\n\nThe sp_mode::Bool tag switches between dense and sparse matrix methods.  This will only affect the computation of Hᴿ (not Hᵏ or diagonalization) and gradient computations when doing optimization.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_sp_tol-Tuple{Config}","page":"General Options","title":"Hamster.get_sp_tol","text":"sp_tol=1e-10\n\nThe sp_tol::Float tag sets a tolerance for values to be considered zero.\n\n\n\n\n\n","category":"method"},{"location":"conf/general_tags/#Hamster.get_tb_model-Tuple{Config}","page":"General Options","title":"Hamster.get_tb_model","text":"tb_model=true\n\nThe tb_model tag switches on the use of a TB model in the effective Hamiltonian model.\n\n\n\n\n\n","category":"method"},{"location":"examples/gaas_tb_hyperopt/#hyperopt-gaas","page":"TB Hyperparameter optimization for GaAs","title":"TB Hyperparameter optimization for GaAs","text":"","category":"section"},{"location":"examples/gaas_tb_hyperopt/","page":"TB Hyperparameter optimization for GaAs","title":"TB Hyperparameter optimization for GaAs","text":"This example demonstrates hyperparameter optimization of a TB model for GaAs using a hybrid orbital basis. While all numerical input parameters can in principle be optimized, we focus here on the distance-dependence parameter alpha. All input files can be found here.","category":"page"},{"location":"examples/gaas_tb_hyperopt/","page":"TB Hyperparameter optimization for GaAs","title":"TB Hyperparameter optimization for GaAs","text":"To run a hyperparameter optimization, both an Optimizer and a HyperOpt block must be present in the config file. At minimum, the parameters to be optimized and their respective search windows (lowerbounds and upperbounds) need to be specified. The search interval can further be refined using the stepsizes argument.","category":"page"},{"location":"examples/gaas_tb_hyperopt/","page":"TB Hyperparameter optimization for GaAs","title":"TB Hyperparameter optimization for GaAs","text":"Three hyperparameter optimization methods are available: Random Search (mode=random), Grid Search (mode=grid), and the Tree-structured Parzen Estimator (mode=tpe).","category":"page"},{"location":"examples/gaas_tb_hyperopt/","page":"TB Hyperparameter optimization for GaAs","title":"TB Hyperparameter optimization for GaAs","text":"As additional input files, two data sets (training and validation) as well as a structure file are required.","category":"page"},{"location":"examples/gaas_tb_hyperopt/","page":"TB Hyperparameter optimization for GaAs","title":"TB Hyperparameter optimization for GaAs","text":"By default, this workflow reports an update only after each completed hyperparameter optimization step, showing the final validation loss and the current optimum for comparison. An estimate of the remaining runtime is also provided, based on the average iteration time.","category":"page"},{"location":"examples/examples/#examples","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"examples/examples/","page":"Overview","title":"Overview","text":"A few examples on using Hamster.jl are provided:","category":"page"},{"location":"examples/examples/","page":"Overview","title":"Overview","text":"Model evaluation with existing parameters\nTB hyperparameter optimization for GaAs\nFitting a Delta-ML model on data from MD","category":"page"},{"location":"examples/gaas_ml_fit/#mdfit-gaas","page":"Fitting a Delta-ML model on data from MD","title":"Fitting a Delta-ML model on data from MD","text":"","category":"section"},{"location":"examples/gaas_ml_fit/","page":"Fitting a Delta-ML model on data from MD","title":"Fitting a Delta-ML model on data from MD","text":"This example demonstrates how to fit a Δ-ML model on top of an existing TB parameterization for GaAs. While all Hamiltonian components (TB, ML, SOC) can in principle be optimized simultaneously, it is significantly more stable to fit them separately.","category":"page"},{"location":"examples/gaas_ml_fit/","page":"Fitting a Delta-ML model on data from MD","title":"Fitting a Delta-ML model on data from MD","text":"To this end, we will use eigenvalue data (provided by eigenval.h5) from an MD trajectory (provided by structures.h5) computed with VASP. A POSCAR file (e.g., initial structure of the MD run) is also required to provide atom species information and reference positions. Inputs file can be found here.","category":"page"},{"location":"examples/gaas_ml_fit/#Supercell-block","page":"Fitting a Delta-ML model on data from MD","title":"Supercell block","text":"","category":"section"},{"location":"examples/gaas_ml_fit/","page":"Fitting a Delta-ML model on data from MD","title":"Fitting a Delta-ML model on data from MD","text":"The supercell block tells Hamster to analyze multiple structures.   The keywords poscar and xdatcar specify the reference POSCAR file and the trajectory file (XDATCAR or *.h5).  ","category":"page"},{"location":"examples/gaas_ml_fit/","page":"Fitting a Delta-ML model on data from MD","title":"Fitting a Delta-ML model on data from MD","text":"The selection of structures is controlled by:  ","category":"page"},{"location":"examples/gaas_ml_fit/","page":"Fitting a Delta-ML model on data from MD","title":"Fitting a Delta-ML model on data from MD","text":"nconf: Number of structures to sample.  \nnconf_min: Minimum trajectory index (optional, default = 1).  \nnconf_max: Maximum trajectory index (required).","category":"page"},{"location":"examples/gaas_ml_fit/#ML-block","page":"Fitting a Delta-ML model on data from MD","title":"ML block","text":"","category":"section"},{"location":"examples/gaas_ml_fit/","page":"Fitting a Delta-ML model on data from MD","title":"Fitting a Delta-ML model on data from MD","text":"The ML model uses a Gaussian kernel to interpolate between a set of descriptor vectors of Hamiltonian matrix elements.   In practice, it is recommended to perform hyperparameter optimization for the ML model.  ","category":"page"},{"location":"examples/gaas_ml_fit/","page":"Fitting a Delta-ML model on data from MD","title":"Fitting a Delta-ML model on data from MD","text":"Sampling of descriptor vectors is controlled by:  ","category":"page"},{"location":"examples/gaas_ml_fit/","page":"Fitting a Delta-ML model on data from MD","title":"Fitting a Delta-ML model on data from MD","text":"npoints: Number of descriptor vectors to sample.  \nncluster: Number of clusters used in k-means clustering.  ","category":"page"},{"location":"examples/gaas_ml_fit/","page":"Fitting a Delta-ML model on data from MD","title":"Fitting a Delta-ML model on data from MD","text":"Kernel model parameters can be modified via:  ","category":"page"},{"location":"examples/gaas_ml_fit/","page":"Fitting a Delta-ML model on data from MD","title":"Fitting a Delta-ML model on data from MD","text":"sim_params: Kernel width.  \nenv_scale: Scaling factor applied only to the environment value.  \napply_distortion: If enabled, all values in the descriptor vector are updated according to distorted atomic positions.","category":"page"},{"location":"examples/gaas_ml_fit/#Optimization","page":"Fitting a Delta-ML model on data from MD","title":"Optimization","text":"","category":"section"},{"location":"examples/gaas_ml_fit/","page":"Fitting a Delta-ML model on data from MD","title":"Fitting a Delta-ML model on data from MD","text":"Both train_mode and val_mode should be set to md. The optimization can be parallelized over the number of structures using MPI. Set update_tb to false so that only the ML parameters are updated. Using a small learning rate (e.g., 0.01) is recommended to improve optimization stability.","category":"page"},{"location":"library/library/#Calculation-types","page":"Library","title":"Calculation types","text":"","category":"section"},{"location":"library/library/#Hamster.hyper_optimize-NTuple{5, Any}","page":"Library","title":"Hamster.hyper_optimize","text":"hyper_optimize(param_values, params, comm, conf; rank=0, nranks=1, verbosity=get_verbosity(conf)) -> Float64\n\nEvaluate a given set of hyperparameters by updating a configuration and running an optimization calculation.\n\nArguments\n\nparam_values::Vector{Float64}: Numerical values for each parameter to be optimized.\nparams::Vector{String}: List of parameter keys. Keys can be flat (e.g., \"alpha\") or hierarchical (e.g., \"Ga_alpha\").\ncomm: MPI communicator.\nconf: Configuration object.\nrank::Int: MPI rank (default = 0).\nnranks::Int: Total number of MPI processes (default = 1).\nverbosity::Int: Verbosity level (default = pulled from configuration).\n\nReturns\n\nFloat64: The minimum training loss obtained from the optimization calculation.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.run_calculation-Tuple{Val{:hyper_optimization}, Any, Any}","page":"Library","title":"Hamster.run_calculation","text":"run_calculation(::Val{:hyper_optimization}, comm, conf; rank=0, nranks=1, verbosity=get_verbosity(conf))\n\nPerforms random search hyperparameter optimization by repeatedly evaluating randomly sampled parameter configurations.\n\nArguments\n\n::Val{:hyper_optimization}: Dispatch tag to indicate this function handles hyperparameter optimization.\ncomm: MPI communicator used for distributed computation.\nconf: Configuration object used to retrieve hyperparameter bounds, optimization settings, and verbosity.\nrank::Int: MPI rank (default = 0).\nnranks::Int: Number of MPI processes (default = 1).\nverbosity::Int: Controls the amount of output printed (default = retrieved from conf).\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.run_calculation-Tuple{Val{:optimization}, Any, Config}","page":"Library","title":"Hamster.run_calculation","text":"run_calculation(::Val{:optimization}, comm, conf::Config; rank=0, nranks=1)\n\nRuns the optimization process for an effective Hamiltonian model using the specified configuration.\n\nArguments\n\nconf::Config: A configuration instance.\n\nWorkflow\n\nConfiguration Sampling:\nSplits the configuration indices into training (train_config_inds) and validation (val_config_inds) sets.\nTranslation Vectors:\nReads translation vectors Rs (if hr_fit).\nTraining Data Preparation:\nRetrieves training structures (train_strcs) and constructs basis functions (train_bases).\nInitializes the effective Hamiltonian (ham_train) for the training data.\nValidation Data Preparation:\nRetrieves validation structures (val_strcs) and constructs basis functions (val_bases).\nInitializes the effective Hamiltonian (ham_val) for the validation data.\nData Loader and Optimizer:\nInitializes a DataLoader (dl) with the training and validation configuration indices.\nSets up a gradient descent optimizer (optim) with the extracted parameters.\nProfiler:\nCreates a HamsterProfiler (prof) for profiling the optimization process.\nModel Optimization:\nPerforms the optimization using optimize_model!, which iterates over the training and validation data to refine the model.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_eigenvalues","page":"Library","title":"Hamster.get_eigenvalues","text":"get_eigenvalues(ham::EffectiveHamiltonian, prof, local_inds, comm, conf=get_empty_config();\n                Nbatch=get_nbatch(conf), rank=0, nranks=1, verbosity=get_verbosity(conf))\n\nComputes eigenvalues and eigenvectors of the Hamiltonian for a set of structures, distributing the computation across MPI ranks.\n\nArguments\n\nham::EffectiveHamiltonian: The effective Hamiltonian object.\nprof: A profiling object that stores timing information for each step.\nlocal_inds: Indices of the local structures assigned to the current MPI rank.\ncomm: The MPI communicator used for parallel execution.\nconf: Configuration object (default: get_empty_config()) containing parameters for diagonalization.\nNbatch: The batch size for processing structures (default: get_nbatch(conf)).\nrank: The rank of the MPI process (default: 0).\nnranks: Total number of MPI ranks (default: 1).\nverbosity: Level of verbosity for printed output (default: get_verbosity(conf)).\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.run_calculation-Tuple{Val{:standard}, Any, Config}","page":"Library","title":"Hamster.run_calculation","text":"run_calculation(::Val{:standard}, comm, conf::Config; rank=0, nranks=1)\n\nPerforms a standard calculation for an effective Hamiltonian model.\n\nArguments\n\n::Val{:standard}: A type parameter indicating that this function performs a standard calculation.\ncomm: The MPI communicator used for parallel processing.\nconf::Config: A configuration object that contains parameters for the calculation.\nrank: The MPI rank of the current process (default: 0).\nnranks: The total number of MPI ranks (default: 1).\n\nFunction Behavior\n\nRetrieves the configuration indices using get_config_index_sample(conf).\nIf configuration indices are specified in the configuration file, they are read from a file.\nThe root process (rank == 0) writes the configuration indices to a file.\nThe indices are broadcast to all processes using MPI.Bcast!, ensuring consistency across ranks.\nDetermines the mode of calculation:\n\"md\" (molecular dynamics) if the configuration contains \"Supercell\".\n\"pc\" (phonon calculation) otherwise.\nDistributes the configuration indices among MPI ranks for parallel execution.\nExtracts atomic structures using get_structures(conf, config_indices=local_inds, mode=mode).\nConstructs bases using the Basis type for each structure.\nInitializes the EffectiveHamiltonian for solving electronic or vibrational properties.\nSets up a HamsterProfiler to profile the computation over multiple iterations.\nComputes eigenvalues using get_eigenvalues, which performs the main calculation.\nReturns the profiler object (prof), which contains performance and profiling data.\n\nReturns\n\nprof::HamsterProfiler: An object containing profiling information about the Hamiltonian calculation.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Basis","page":"Library","title":"Basis","text":"","category":"section"},{"location":"library/library/#Hamster.AdaptiveInterpolator","page":"Library","title":"Hamster.AdaptiveInterpolator","text":"AdaptiveInterpolator(xmin::Float64, xmax::Float64, Ninit::Int64, Nmax::Int64, tol::Float64)\n\nA struct that defines the settings for adaptive interpolation.\n\nFields\n\nxmin::Float64: The minimum value of x in the interpolation range.\nxmax::Float64: The maximum value of x in the interpolation range.\nNinit::Int64: The initial number of sample points for the interpolation.\nNmax::Int64: The maximum number of sample points allowed during the interpolation process.\ntol::Float64: The convergence tolerance. If the interpolation error falls below this value, the algorithm is considered to have converged.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.get_new_point!-NTuple{4, Any}","page":"Library","title":"Hamster.get_new_point!","text":"get_new_point(f, xmax, ymax, Nmax; max_iter=10000)\n\nGenerate a new point xnew for function sampling based on the gradient and curvature of the function f.  This function prioritizes areas of the function with high curvature or gradient, to improve sampling in regions  with rapid changes.\n\nArguments\n\nf: The function to sample from. Assumed to have fields xs containing previous sample points.\nxmax: The maximum possible value for x.\nymax: The maximum possible value of the function f over the sampled points.\nNmax: The maximum number of points that can be generated.\nmax_iter: Maximum number of iterations to attempt generating a new point (default is 10000).\n\nReturns\n\nxnew: A new sampled point xnew that is in a region with either high gradient or high curvature, and  sufficiently far from existing points in f.xs.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.insertxy!-NTuple{4, Any}","page":"Library","title":"Hamster.insertxy!","text":"insertxy!(xs, ys, xnew, ynew)\n\nInsert a new point (xnew, ynew) into two vectors xs and ys, which are assumed to be paired coordinates,  while maintaining the sorted order of xs.\n\nArguments\n\nxs: A vector of x values (assumed to be sorted in ascending order).\nys: A vector of y values corresponding to xs.\nxnew: The new x value to insert into xs.\nynew: The new y value to insert into ys, corresponding to xnew.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.interpolate_f-Tuple{Hamster.AdaptiveInterpolator, Function}","page":"Library","title":"Hamster.interpolate_f","text":"interpolate_f(itper::AdaptiveInterpolator, f::Function)\n\nAdaptive interpolation of a given function f using an AdaptiveInterpolator. The function is sampled  at adaptive points and interpolated using cubic splines until convergence is reached or the maximum number  of samples (Nmax) is exceeded.\n\nArguments\n\nitper::AdaptiveInterpolator: An instance of the AdaptiveInterpolator struct that defines the interpolation  settings, such as the initial number of points, the maximum allowed number of points (Nmax),  and the convergence tolerance.\nf::Function: The function to interpolate.\n\nReturns\n\nxs: A vector of x values where the function has been evaluated.\nys: A vector of y values (f(xs)) corresponding to the x values.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.Basis","page":"Library","title":"Hamster.Basis","text":"Basis(strc::Structure, conf=get_empty_config()) -> Basis\n\nConstruct a Basis object from a given Structure and configuration.\n\nArguments\n\nstrc::Structure: The Structure object representing the atomic or molecular structure for which the basis is being constructed.\nconf: (Optional) The configuration object that holds parameters to control the basis construction. Defaults to get_empty_config().\n\nReturns\n\nBasis: A Basis object.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Basis-2","page":"Library","title":"Hamster.Basis","text":"struct Basis{Orb, Ov, P, R}\n\nA data structure that represents the basis of a system, containing information about orbitals, overlap integrals, parameters, and precomputed radial functions (RLLM).\n\nFields\n\norbitals::Orb: A collection of orbitals for each ion in the system. This typically contains the orbital functions and axes associated with each ion.\noverlaps::Ov: A collection of overlap integrals between orbitals. These overlap integrals define how the orbitals interact with each other spatially.\nparameters::P: Parameters used for computing the matrix elements between orbitals. These can include interaction strengths, angular momentum values, and other system-specific constants.\nrllm::R: Precomputed radial functions (RLLM), typically stored as spline objects for efficient interpolation. These functions depend on the distance between ions and are used in overlap integrals.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Base.length-Tuple{Basis}","page":"Library","title":"Base.length","text":"length(basis::Basis) -> Int\n\nCompute the total number of orbitals in the basis.\n\nArguments\n\nbasis::Basis: The Basis object containing orbitals for each ion in the system.\n\nReturns\n\nInt: The total number of orbitals, calculated by summing the lengths of the orbital sets for all ions in the basis.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Base.size-Tuple{Basis}","page":"Library","title":"Base.size","text":"Base.size(basis::Basis) -> Tuple{Int}\n\nReturns the size of the Basis object, which corresponds to the number of orbitals centered on each ion.\n\nArguments\n\nbasis::Basis: The basis object containing a set of orbitals.\n\nReturns\n\nA tuple containing the number of orbitals in the basis.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_geometry_tensor","page":"Library","title":"Hamster.get_geometry_tensor","text":"get_geometry_tensor(strc, basis, conf=get_empty_config(); tmethod=get_tmethod(conf), rcut=get_rcut(conf))\n\nConstructs the geometry tensor based on the structure of the system, the orbital basis, and configuration settings.\n\nArguments\n\nstrc: The structure object, containing information about ions, lattice, and geometry of the system.\nbasis: The basis object, containing the orbital information and overlap parameters.\nconf: Configuration object, defaults to an empty configuration if not provided.\ntmethod: Transformation method used for coordinate system alignment (default is obtained from the configuration).\nrcut: Cutoff distance for nearest neighbor interactions (default is obtained from the configuration).\n\nKeyword Arguments\n\ntmethod: The transformation method for aligning coordinate systems.\nrcut: The distance cutoff for nearest neighbor interactions.\n\nReturns\n\nThe reshaped geometry tensor, represented as a matrix of sparse matrices, which encodes the overlap contributions for the system's orbital interactions for each parameter.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.get_oc_and_mode_dicts-Tuple{Any, Any}","page":"Library","title":"Hamster.get_oc_and_mode_dicts","text":"get_oc_and_mode_dicts(overlaps, ions)\n\nGenerate dictionaries that map ion pairs to their respective orbital configuration (oc)  and mode types for each overlap configuration.\n\nArguments\n\noverlaps::Vector: A collection of overlap configurations, where each element represents a different overlap calculation.\nions::Vector: A vector of ion types, where each ion has a type field that identifies the specific ion type.\n\nReturns\n\noc_dicts::Vector{Dict{IonLabel, Union{SymOrb, DefOrb, MirrOrb}}}: A vector of dictionaries, each corresponding to one overlap configuration, mapping ion pairs (represented by IonLabel) to their respective orbital configuration (SymOrb, DefOrb, or MirrOrb).\nmode_dicts::Vector{Dict{IonLabel, Union{NormalMode, ConjugateMode}}}: A vector of dictionaries, each corresponding to one overlap configuration, mapping ion pairs (represented by IonLabel) to their respective mode type (NormalMode or ConjugateMode).\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_param_index-NTuple{7, Any}","page":"Library","title":"Hamster.get_param_index","text":"get_param_index(overlap, nnlabel, parameters, orb1, orb2, i, j) :: Int64\n\nRetrieve the index of a parameter that matches a given nearest neighbor label, overlap label,  orbital types, and ion labels. \n\nArguments\n\noverlap: An object representing the overlap between two orbitals or ions.\nnnlabel::Int: The nearest neighbor (NN) label, identifying if this is a nearest neighbor interaction.\nparameters::Vector: A vector of parameter objects, each of which contains attributes such as nnlabel, overlap_label, and ion_label.\norb1: The first orbital involved in the overlap.\norb2: The second orbital involved in the overlap.\ni::Int: The index of the first orbital.\nj::Int: The index of the second orbital.\n\nReturns\n\nInt64: The index v of the parameter in the parameters vector that matches the conditions. If no match is found, the function returns 0.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.nparams-Tuple{Basis}","page":"Library","title":"Hamster.nparams","text":"nparams(basis::Basis) -> Int\n\nReturn the number of TB overlap parameters defined in basis.\n\nArguments\n\nbasis::Basis: The Basis object containing orbitals for each ion in the system.\n\nReturns\n\nInt: The total number of parameters.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.overlap_contributes_to_matrix_element-NTuple{4, Any}","page":"Library","title":"Hamster.overlap_contributes_to_matrix_element","text":"overlap_contributes_to_matrix_element(overlap, orb1, orb2, ion_label)\n\nReturn true if overlap contributes to the matrix element between the orbitals orb1 and orb2 for ion_label.\n\nArguments\n\noverlap: The overlap object, which contains information about the types of orbitals involved and the ion label.\norb1: The first orbital.\norb2: The second orbital.\nion_label: The ion label to check if the overlap corresponds to the same type of ions as the orbitals.\n\nReturns\n\nBool: Returns true if the overlap contributes to the matrix element, i.e., if the orbital types of orb1 and orb2 match the types in the overlap, and the ion_label matches.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.reshape_geometry_tensor-NTuple{4, Any}","page":"Library","title":"Hamster.reshape_geometry_tensor","text":"reshape_geometry_tensor(h_dict, NV, NR, Nε)\n\nReshapes the geometry tensor from a dictionary h_dict into a matrix of sparse matrices.\n\nArguments\n\nh_dict::Dict: A dictionary where keys are tuples of the form (v, i, j, R) representing the tensor indices, and values are the corresponding tensor entries.\nNV::Int: Number of rows (vectors) in the reshaped matrix.\nNR::Int: Number of columns (points) in the reshaped matrix.\nNε::Int: Not used explicitly in this function but typically represents the number of strain components.\n\nReturns\n\nA NV x NR matrix h_out where each element is a sparse matrix (SparseMatrixCSC{Float64, Int64}) formed by the corresponding indices and values from the input dictionary h_dict.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_index_to_ion_orb_map-Tuple{Any}","page":"Library","title":"Hamster.get_index_to_ion_orb_map","text":"get_index_to_ion_orb_map(Norb) -> Vector{Tuple{Int64, Int64}}\n\nGenerate a mapping from basis state indices to corresponding ion and orbital indices.\n\nArguments:\n\nNorb: A vector where each element represents the number of orbitals associated with each ion. \n\nReturns:\n\nindex_map: A vector of tuples where each tuple (iion, iorb) represents the ion and orbital index corresponding to i.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_ion_and_orbital_indices-Tuple{Any, Any}","page":"Library","title":"Hamster.get_ion_and_orbital_indices","text":"get_ion_and_orbital_indices(Norb, index) -> Tuple{Int64, Int64}\n\nReturn the ion index iion and the orbital index jorb corresponding to the basis-state index index in the Hamiltonian matrix.\n\nArguments:\n\nNorb: A vector where each element represents the number of orbitals for each ion. \nindex: The basis-state index for which the corresponding ion and orbital indices are sought.\n\nReturns:\n\niion: The index of the ion corresponding to the given index.\njorb: The index of the orbital for the ion iion corresponding to index.\nIf index is out of bounds, returns (0, 0) as a fallback.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_ion_orb_to_index_map-Tuple{Any}","page":"Library","title":"Hamster.get_ion_orb_to_index_map","text":"get_ion_orb_to_index_map(Norb) -> Dict{Tuple{Int64, Int64}, Int64}\n\nGenerate a mapping from ion and orbital indices to a basis state index.\n\nArguments:\n\nNorb: A vector where each element represents the number of orbitals associated with each ion. \n\nReturns:\n\nij_map: A dictionary where each key is a tuple (i_ion, i_orb) representing the ion index i_ion and the  orbital index i_orb. The value corresponding to each key is the basis state index i.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.IonLabel","page":"Library","title":"Hamster.IonLabel","text":"IonLabel(types::SVector{2, Int64})\n\nA structure representing a label for overlaps between two ions, characterized by a 2-element static vector of integers that indicate the ion species.\n\nFields\n\ntypes::SVector{2, Int64}: A static vector containing two Int64 values representing the types or identifiers associated with the ion. The use of SVector{2, Int64} ensures that the two types are stored efficiently as a fixed-size array.\n\nConstructors\n\nIonLabel(type1::Int64, type2::Int64; sorted=true): Creates an IonLabel from two integer types. If sorted=true, the types will be sorted before creating the label, ensuring consistent ordering.\nIonLabel(type1::String, type2::String; sorted=true): Creates an IonLabel from two element symbols (as Strings). Converts the symbols to atomic numbers and optionally sorts them if sorted=true.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Base.isequal-Tuple{Hamster.IonLabel, Hamster.IonLabel}","page":"Library","title":"Base.isequal","text":"Base.isequal(ion_label1::IonLabel, ion_label2::IonLabel; sorted=false) -> Bool\n\nCompares two IonLabel objects for equality. \n\nArguments\n\nion_label1::IonLabel: The first IonLabel instance to compare.\nion_label2::IonLabel: The second IonLabel instance to compare.\nsorted::Bool=false: Whether to sort the types fields of both IonLabel instances before comparing them. Defaults to false. \n\nReturns\n\nBool: Returns true if the IonLabel instances are considered equal based on their types fields (with or without sorting), and false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Base.string-Tuple{Hamster.IonLabel}","page":"Library","title":"Base.string","text":"string(ion_label::IonLabel) -> String\n\nConverts an IonLabel object into a human-readable string representation, where the types are converted into their corresponding element symbols.\n\nArguments\n\nion_label::IonLabel: The IonLabel instance containing two atomic types represented as atomic numbers.\n\nReturns\n\nString: A string representation of the IonLabel, where the two element numbers are converted to their respective element symbols and concatenated with a + sign.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.aresameions-Tuple{Hamster.IonLabel}","page":"Library","title":"Hamster.aresameions","text":"sameions(ion_label::IonLabel) -> Bool\n\nChecks if both ions in the given IonLabel are of the same type.\n\nArguments\n\nion_label::IonLabel: The IonLabel object that contains two ion types represented as atomic numbers.\n\nReturns\n\nBool: Returns true if both ions in the IonLabel have the same atomic number, meaning they are the same type of ion; otherwise, returns false.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.areswapped-Tuple{Any, Any}","page":"Library","title":"Hamster.areswapped","text":"areswapped(type1, type2) -> Bool\n\nDetermines whether the two ion types type1 and type2 are swapped when creating an IonLabel.  This function returns true if the unsorted IonLabel(type1, type2, sorted=false) differs from the sorted IonLabel(type1, type2),  indicating that the order of type1 and type2 was altered during sorting. Otherwise, it returns false.\n\nArguments\n\ntype1: The first ion type.\ntype2: The second ion type.\n\nReturns\n\nBool: true if the order of type1 and type2 is swapped in the sorted IonLabel, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_nn_label","page":"Library","title":"Hamster.get_nn_label","text":"get_nn_label(r, r_thresh, onsite, sepNN) :: Int64\n\nReturns the nearest neighbor (NN) label (0, 1, 2) for a matrix element based on the interatomic distance r, a nearest neighbor  threshold r_thresh, and flags for onsite and sepNN (separated nearest neighbors).\n\nArguments\n\nr::Float64: The interatomic distance between two atoms.\nr_thresh::Float64: The threshold distance for determining nearest neighbors.\nonsite::Bool: A flag indicating if onsite interactions (i.e., when r ≈ 0) should be considered separately.\nsepNN::Bool: A flag indicating if nearest neighbors should be separated into multiple groups based on distance.\n\nReturns\n\nAn integer label (Int64) representing the type of interaction.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.string_to_overlap_label-Tuple{Any}","page":"Library","title":"Hamster.string_to_overlap_label","text":"string_to_overlap_label(overlap_string::String) -> SVector{3, Int64}\n\nConverts an overlap_string into an overlap label, represented as a 3-element static vector of integers.  The overlap label consists of two angular momentum indices (l1, l2) and a magnetic quantum number (m).\n\nArguments\n\noverlap_string::String: A string representing the overlap label. This string can indicate diagonal or off-diagonal onsite interactions or hybridized orbitals.\n\nString Parsing\n\nIf the string contains \"diag\", it represents a diagonal or off-diagonal onsite interaction.\nIf it's diagonal, l1 and l2 will be the same value.\nIf it's off-diagonal, the string may represent hybrid orbitals or a combination of atomic and hybrid orbitals.\nBased on the length of ll_string, l1 and l2 are parsed:\nLength 2: Represents two atomic orbitals (e.g., \"diag12\").\nLength 3: Combination of hybrid and atomic orbitals (e.g., \"diag-12\").\nLength 4: Only hybrid orbitals (e.g., \"diag-1213\").\nm is set to 0 for diagonal and 1 for off-diagonal onsite interactions to differentiate between them.\nIf the string does not contain \"diag\", it represents an offsite overlap, and l1, l2, and m are determined using lookup tables (ldict_inv and mdict_inv).\n\nReturns\n\nSVector{3, Int64}: A static vector where:\nl1: First angular momentum index.\nl2: Second angular momentum index.\nm: Magnetic quantum number (or other integer differentiating diagonal and off-diagonal cases).\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.DefOrb","page":"Library","title":"Hamster.DefOrb","text":"DefOrb()\n\nNo symmetry in orbitals: orbital type in label has to be used in the same order as given.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.MirrOrb","page":"Library","title":"Hamster.MirrOrb","text":"MirrOrb()\n\nNo symmetry in orbitals: orbital type in label has to be used in reverse order as given.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.OrbitalConfiguration","page":"Library","title":"Hamster.OrbitalConfiguration","text":"OrbitalConfiguration\n\nAbstract type for defining the configuration of orbitals w.r.t. to the overlap label for a specific TB overlap.\n\nSubtypes:\n\nSymOrb: Symmetry in orbitals allows for interchangeable orbital types in labels.\nDefOrb: No symmetry; the order of orbital types in labels must be preserved exactly.\nMirrOrb: Symmetry requires orbital types to be used in reverse order.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.OrbitalConfiguration-NTuple{4, Any}","page":"Library","title":"Hamster.OrbitalConfiguration","text":"OrbitalConfiguration(Y1, Y2, Ys1, Ys2; sameions=true, ionswap=false) -> OrbitalConfiguration\n\nDetermine the OrbitalConfiguration type based on the symmetry and relationship between two orbitals, Y1 and Y2,  and their corresponding sets Ys1 and Ys2. This function decides the appropriate orbital symmetry configuration  based on the angular momentum and ion types involved.\n\nArguments\n\nY1: The first orbital (expected to have an l property for angular momentum).\nY2: The second orbital (expected to have an l property for angular momentum).\nYs1: Set of orbitals corresponding to the first ion.\nYs2: Set of orbitals corresponding to the second ion.\nsameions (optional, default=true): A boolean indicating whether both orbitals belong to the same ion type.\nionswap (optional, default=false): A boolean indicating whether the ion types are swapped in the configuration.\n\nReturns:\n\nEither SymOrb, DefOrb or MirrOrb.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.SymOrb","page":"Library","title":"Hamster.SymOrb","text":"SymOrb()\n\nSymmetry in orbitals: orbital type in label can be interchanged.\n\nExample\n\n<Ga_pσ|As_pσ>\n\nIn this case, both orbitals are equal and the label ppσ is symmetric.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.get_mode-NTuple{5, Any}","page":"Library","title":"Hamster.get_mode","text":"get_mode(mode_dicts, kparam, ion_label, iorb, jorb)\n\nRetrieve the mode (mode) for a given ion label and orbital indices.\n\nArguments\n\nmode_dicts: A vector of dictionaries where each dictionary maps IonLabels to their respective mode (e.g., NormalMode, ConjugateMode). Each entry corresponds to a different k-point parameter (kparam).\nkparam: The k-point parameter index indicating which dictionary in mode_dicts to use.\nion_label: The label identifying the ion pair for which the mode is needed.\niorb: The index of the first orbital in the pair.\njorb: The index of the second orbital in the pair.\n\nReturns\n\nmode: The mode corresponding to the given ion_label, after potentially checking for a conjugate mode using check_for_conjugate_mode.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_orbconfig-NTuple{5, Any}","page":"Library","title":"Hamster.get_orbconfig","text":"get_orbconfig(oc_dicts, kparam, ion_label, iorb, jorb)\n\nRetrieve the orbital configuration (orbconfig) for a given ion label and orbital indices.\n\nArguments\n\noc_dicts: A vector of dictionaries where each dictionary maps IonLabels to their respective orbital configurations (orbconfig). Each entry in the dictionary corresponds to a different k-point parameter (kparam).\nkparam: The k-point parameter index indicating which dictionary in oc_dicts to use.\nion_label: The label identifying the ion pair for which the orbital configuration is needed.\niorb: The index of the first orbital in the pair.\njorb: The index of the second orbital in the pair.\n\nReturns\n\norbconfig: The orbital configuration (orbconfig) after potentially checking for a conjugate configuration using check_for_conjugate_orbconfig.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.Orbital","page":"Library","title":"Hamster.Orbital","text":"Orbital{O<:Angular}(ion_type::Int64, type::O, axis::SVector{3, Float64})\n\nDefines an orbital associated with an ion, characterized by its type, angular momentum properties, and orientation.\n\nType Parameters\n\nO<:Angular: Specifies the angular momentum type, such as s, p, or d orbitals.\n\nFields\n\nion_type::Int64: An integer representing the type or species of the ion this orbital is associated with.\ntype::O: The angular momentum type of the orbital, parameterized by O, which defines the orbital's angular properties (e.g., s, p, d orbitals).\naxis::SVector{3, Float64}: A 3D unit vector representing the orientation or axis of the orbital in Cartesian coordinates.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.get_axes","page":"Library","title":"Hamster.get_axes","text":"get_axes(iion::Int64, strc::Structure, orbital_list::Vector{Angular}, conf=get_empty_config(); NNaxes=get_nnaxes(conf, type))\n\nCompute the axes (or orientations) for a set of orbitals associated with a specific ion in a structure.\n\nArguments\n\niion::Int64: The index of the ion for which to compute the axes.\nstrc::Structure: A Structure object representing the lattice and ion configuration.\norbital_list::Vector{Angular}: A vector containing angular orbital types (e.g., s, p, sp3) for which axes need to be computed.\nconf: Configuration object (optional) that contains settings for computing axes. Default is get_empty_config().\nNNaxes: A Boolean flag that determines whether to compute nearest-neighbor axes (true) or directly use predefined orbital axes (false).\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.get_axes_from_orbitals-Tuple{Vector{Vector{Hamster.Orbital}}}","page":"Library","title":"Hamster.get_axes_from_orbitals","text":"get_axes_from_orbitals(orbitals::Vector{Vector{Orbitals}}]) -> Vector{Matrix{3, Norb}}\n\nReads the orbital axes from a nested Vector of Orbital and returns them as a Vector of matrices.\n\nArguments\n\norbitals::Vector{Vector{Orbital}}: A vector where each element is a vector of Orbital.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_axis-Tuple{Hamster.sp3}","page":"Library","title":"Hamster.get_axis","text":"get_axis(h::HybridOrbital) -> Vector{SVector{3, Float64}}\nget_axis(o::AngularOrbital) -> SVector{3, Float64}\n\nReturns the unit vector(s) representing the axis (or axes) of the given orbital type.\n\nOrbital Types and Axes\n\nh::sp3: Returns four unit vectors corresponding to the axes of sp3 (or sp3dr2) hybrid orbitals: [1, 1, 1], [1, -1, -1], [-1, 1, -1], [-1, -1, 1].\no::s: Returns the axis [0, 0, 1] for an s orbital.\no::px: Returns the axis [1, 0, 0] for a px orbital.\no::py: Returns the axis [0, 1, 0] for a py orbital.\no::pz: Returns the axis [0, 0, 1] for a pz orbital.\no::pxdx2: Returns the axis [1, 0, 0] for a combined px/dx² orbital.\no::pydy2: Returns the axis [0, 1, 0] for a combined py/dy² orbital.\no::pzdz2: Returns the axis [0, 0, 1] for a combined pz/dz² orbital.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_orbitals","page":"Library","title":"Hamster.get_orbitals","text":"get_orbitals(strc::Structure, conf=get_empty_config())\n\nGenerate a list of orbitals for the ions in a given Structure object, using a configuration for the orbital types and axes.\n\nArguments\n\nstrc::Structure: The structure containing ions and their corresponding positions and types.\nconf: Configuration object that defines how to retrieve orbital information for the given ions. Defaults to get_empty_config() if no configuration is provided.\n\nReturns\n\norbitals::Vector{Orbital}: A vector of Orbital objects, where each orbital corresponds to a specific ion in the structure.\n\nDetails\n\nThe function loops over all ions in the given structure (strc), retrieves the orbital types for each ion based on the ion's type, and generates corresponding axes.\nFor each ion, it constructs the associated orbitals, considering the ion's type, angular properties, and orientation (axes).\nIt then stores the orbitals as Orbital objects in a vector.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.TBOverlap","page":"Library","title":"Hamster.TBOverlap","text":"TBOverlap{T<:MatrixElement, OC<:OrbitalConfiguration}\n\nRepresents a tight-binding (TB) overlap used in calculations, characterized by its type, orbital configuration, and ion label. This represents one interaction term.\n\nFields\n\ntype::T: Specifies the type of the TB overlap parameter, where T is a subtype of MatrixElement. This field indicates the specific kind of matrix element or overlap parameter.\norbconfig::OC: Represents the OrbitalConfiguration associated with the TB overlap parameter.\nion_label::IonLabel: Labels the ions that are involved in the interaction term.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Vddδ","page":"Library","title":"Hamster.Vddδ","text":"Vddδ\n\nOverlap parameter for overlaps between two d-orbitals with |m|=2.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Vddπ","page":"Library","title":"Hamster.Vddπ","text":"Vddπ\n\nOverlap parameter for overlaps between two d-orbitals with |m|=1.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Vddσ","page":"Library","title":"Hamster.Vddσ","text":"Vddσ\n\nOverlap parameter for overlaps between an s- and a d-orbital with |m|=0.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Vpdπ","page":"Library","title":"Hamster.Vpdπ","text":"Vpdπ\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Vpdσ","page":"Library","title":"Hamster.Vpdσ","text":"Vpdσ\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Vppπ","page":"Library","title":"Hamster.Vppπ","text":"Vppπ\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Vppσ","page":"Library","title":"Hamster.Vppσ","text":"Vppσ\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Vsdσ","page":"Library","title":"Hamster.Vsdσ","text":"Vsdσ\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Vspσ","page":"Library","title":"Hamster.Vspσ","text":"Vspσ\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Vssσ","page":"Library","title":"Hamster.Vssσ","text":"Vssσ\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Base.isequal-Union{Tuple{OV2}, Tuple{OV1}, Tuple{OV1, OV2}} where {OV1, OV2<:Hamster.TBOverlap}","page":"Library","title":"Base.isequal","text":"Base.isequal(ov1::TBOverlap, ov2::TBOverlap)\n\nCompare two TBOverlap objects, ov1 and ov2, for equality.\n\nArguments\n\nov1::TBOverlap: The first TBOverlap instance.\nov2::TBOverlap: The second TBOverlap instance.\n\nReturns\n\nBool: true if the two TBOverlap instances are considered equal, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Base.string-Tuple{Hamster.TBOverlap}","page":"Library","title":"Base.string","text":"Base.string(p::TBOverlap; apply_oc=false)::String\n\nConverts a TBOverlap instance into a string, e.g., \"Ga+As_ssσ\". Ifapply_oc=true, theOrbitalConfigurationis taken into account.  This is only relevant fororbconfig<:MirrOrb, where the order of orbitals in the label is inverted, e.g., the overlapspσ`withorbconfig<:MirrOrbwould becomepsσ`.\n\nArguments\n\np::TBOverlap: The TBOverlap instance to be converted into a string.\napply_oc::Bool: A flag indicating whether to apply orbital configuration-specific formatting.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.NConst-Tuple{Hamster.NormalMode, Any, Any, Any}","page":"Library","title":"Hamster.NConst","text":"NConst(baseorb, l₁, l₂)\n\nDetermine the normalization constant for the matrix element between orbitals in baseorb with respective components l₁ and l₂.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.decide_orbconfig-Tuple{Hamster.TBOverlap, Hamster.IonLabel}","page":"Library","title":"Hamster.decide_orbconfig","text":"decide_orbconfig(Vllm, ion_label)\n\nConjugate the orbital configuration if the sorted ion overlap label of the TB parameter Vllm is the conjugate of the actual ion overlap label ion_label of the respective Hamiltonian matrix element.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_baseorb_ls-Tuple{Hamster.TBOverlap}","page":"Library","title":"Hamster.get_baseorb_ls","text":"get_baseorb_ls(overlap::TBOverlap) -> Tuple{Int, Int}\n\nExtract the orbital angular momentum quantum numbers l for the two orbitals in the baseorb field of  the given TBOverlap object.\n\nArguments\n\noverlap::TBOverlap: A TBOverlap object representing the overlap between two orbitals in a tight-binding model.  The baseorb field contains information about the two orbitals.\n\nReturns\n\nA tuple (l1, l2) where l1 is the angular momentum quantum number of the first orbital and  l2 is that of the second orbital.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_overlaps","page":"Library","title":"Hamster.get_overlaps","text":"get_overlaps(ions, orbitals, conf=get_empty_config())\n\nCompute all tight-binding (TB) overlaps between pairs of orbitals for a given list of ions.\n\nArguments\n\nions: A vector of ions from which overlaps are to be computed.\norbitals: A vector of orbitals corresponding to each ion in ions.\nconf: Optional configuration parameter (default: get_empty_config()).\n\nReturns\n\nVector{TBOverlap}: A vector containing all computed TBOverlap instances for the ion and orbital pairs.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.get_overlaps_for_orbitals-NTuple{4, Any}","page":"Library","title":"Hamster.get_overlaps_for_orbitals","text":"get_overlaps_for_orbitals(orbitals_1, orbitals_2, ion_label, ionswap)\n\nCompute the list of tight-binding (TB) overlaps for pairs of orbitals from two ions (orbitals_1 and orbitals_2) based on the given ion_label and whether the ions are swapped (ionswap).\n\nArguments\n\norbitals_1: A collection of orbitals from the first ion.\norbitals_2: A collection of orbitals from the second ion.\nion_label: An IonLabel instance representing the ion types involved in the interaction.\nionswap: A boolean flag indicating if the ions are swapped in the interaction.\n\nReturns\n\nVector{TBOverlap}: A unique list of TBOverlap instances describing the possible overlaps between the orbitals of the two ions, taking into account symmetry and ion swaps.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.me_to_overlap_label-Tuple{Any}","page":"Library","title":"Hamster.me_to_overlap_label","text":"me_to_overlap_label(me::MatrixElement) -> SVector{3, Int64}\n\nConverts the matrix element me to an overlap label with l, l', m as a static array.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.same_ion_label-Tuple{Hamster.TBOverlap, Hamster.IonLabel}","page":"Library","title":"Hamster.same_ion_label","text":"same_ion_label(Vllm, ion_label)\n\nReturn true if the TB overlap Vllm has the ion overlap ion label ion_label independently if either is sorted.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.ParameterLabel","page":"Library","title":"Hamster.ParameterLabel","text":"ParameterLabel(nnlabel::Int64, ion_label::IonLabel, overlap_label::SVector{3, Int64})\n\nRepresents a tight-binding (TB) parameter label by uniquely identifying it based on its nearest neighbor (NN) label, ion label,  and overlap label.\n\nFields\n\nnnlabel::Int64: An integer representing the nearest neighbor (NN) label, which identifies a specific neighbor interaction.\nion_label::IonLabel: An IonLabel object representing the two ion types involved in the TB parameter.\noverlap_label::SVector{3, Int64}: A 3D static vector representing the overlap label in terms of ll'm.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Base.string-Tuple{ParameterLabel}","page":"Library","title":"Base.string","text":"string(param_label::ParameterLabel) -> String\n\nReturns a string representation of the ParameterLabel object by concatenating its nearest neighbor label (nnlabel), ion label (ion_label), and overlap label (overlap_label).\n\nArguments\n\nparam_label::ParameterLabel: The ParameterLabel object containing information about nearest neighbors, ions, and overlap.\n\nString Formatting\n\nNearest neighbor (nnlabel) is prefixed with \"NN\" (e.g., \"NN1\").\nIon label is converted to string using string(param_label.ion_label).\nThe overlap string is constructed based on the nnlabel value:\nFor nnlabel ≠ 0: The overlap string is constructed from ldict and mdict dictionaries using the first two elements of overlap_label.\nFor nnlabel == 0:\nIf overlap_label[3] == 0: The overlap string is \"diag\" followed by the angular momentum index l.\nOtherwise, the overlap string is \"offdiag\" followed by two angular momentum indices l1 and l2.\n\nReturns\n\nA concatenated string in the form, e.g., NN1_Ga+As_ssσ.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.check_consistency-Tuple{Any, Config}","page":"Library","title":"Hamster.check_consistency","text":"check_consistency(conf_values, conf::Config) -> Bool\n\nChecks the consistency of configuration values from a file with the given Config object.\n\nArguments\n\nconf_values::Dict{String, String}: A dictionary of configuration values read from the file (e.g., rcut, onsite, sepNN, _n, and _alpha values).\nconf::Config: A Config object containing the expected values for comparison.\n\nReturns\n\nBool: Returns true if all values in conf_values are consistent with the values in conf, otherwise returns false.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_ion_types_from_parameters-Tuple{Any}","page":"Library","title":"Hamster.get_ion_types_from_parameters","text":"get_ion_types_from_parameters(parameters) -> Vector{String}\n\nExtract and return a unique list of ion types from a given list of parameters. \n\nEach parameter contains an ion_label that consists of two ion types concatenated by a \"+\" sign. This function splits the ion labels, and collects the unique ion types into a single vector.\n\nArguments\n\nparameters::Vector: A vector of parameter objects where each parameter has an ion_label.\n\nReturns\n\nA vector of unique ion types (as strings) extracted from the ion_label field of the parameters.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_onsite_parameters!-Tuple{Any, Any}","page":"Library","title":"Hamster.get_onsite_parameters!","text":"get_onsite_parameters!(parameters::Vector{ParameterLabel}, overlaps::Vector{TBOverlap})\n\nPopulate the parameters vector with onsite tight-binding parameters based on the given overlaps between orbitals.\n\nThis function identifies onsite interaction terms (where both orbitals belong to the same ion) and adds corresponding  ParameterLabel objects to the parameters vector. These labels represent the interaction of orbitals of the same  type (onsite) and account for angular momentum quantum numbers (l₁, l₂).\n\nArguments\n\nparameters::Vector{ParameterLabel}: A vector of tight-binding parameter labels, which will be populated with new onsite parameters.\noverlaps::Vector{TBOverlap}: A vector of TBOverlap objects representing the overlap between orbitals. The function filters those with the same ion type for onsite interactions.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_parameter_for_nn_label!-Tuple{Any, Any, Any}","page":"Library","title":"Hamster.get_parameter_for_nn_label!","text":"get_parameter_for_nn_label!(parameters::Vector{ParameterLabel}, overlaps::Vector{TBOverlap}, nn_label::Int)\n\nPopulate the parameters vector with tight-binding parameters for a given nearest-neighbor (NN) interaction label (nn_label),  based on the provided orbital overlaps.\n\nThis function takes a list of orbital overlaps and assigns them a specified nearest-neighbor label (nn_label), creating  a ParameterLabel for each overlap. These labels capture the interaction between orbitals at different distances (nearest-neighbor interactions).\n\nArguments\n\nparameters::Vector{ParameterLabel}: A vector of tight-binding parameter labels to be populated with new nearest-neighbor parameters.\noverlaps::Vector{TBOverlap}: A vector of TBOverlap objects representing the overlaps between orbitals.\nnn_label::Int: The nearest-neighbor label that defines the type of interaction (e.g., first-nearest-neighbor, second-nearest-neighbor).\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_parameters_from_overlaps","page":"Library","title":"Hamster.get_parameters_from_overlaps","text":"get_parameters_from_overlaps(overlaps::Vector{TBOverlap}, conf::Config=get_empty_config(); sepNN::Bool=get_sepNN(conf), onsite::Bool=get_onsite(conf)) -> Vector{ParameterLabel}\n\nGenerate tight-binding parameters (ParameterLabel) from orbital overlaps, including onsite and nearest-neighbor interactions.\n\nThis function computes a list of ParameterLabel objects based on the given orbital overlaps. It determines whether to include  onsite parameters, first-nearest-neighbor (NN) parameters, and optionally second-nearest-neighbor (NN) parameters, depending on the  configuration.\n\nArguments\n\noverlaps::Vector{TBOverlap}: A vector of orbital overlap objects representing the interactions between orbitals.\nconf::Config: A configuration object that specifies how parameters should be generated (default is an empty config).\nsepNN::Bool: A keyword argument (default from conf) indicating whether second-nearest-neighbor interactions should be included (true if included, false otherwise).\nonsite::Bool: A keyword argument (default from conf) indicating whether onsite parameters should be included (true if included, false otherwise).\n\nReturns\n\nA Vector{ParameterLabel} containing the tight-binding parameters based on the overlaps, including:\nOnsite parameters (if onsite=true).\nFirst-nearest-neighbor parameters (always included).\nSecond-nearest-neighbor parameters (if sepNN=true).\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.read_params","page":"Library","title":"Hamster.read_params","text":"read_params(filename=\"params.dat\")\n\nReads and parses a parameter file generated by write_params into tight-binding (TB) parameters, parameter values, ion types, SOC parameters, and system configuration.\n\nArguments\n\nfilename::String=\"params.dat\": The name of the file to read (default is \"params.dat\").\n\nReturns\n\nparameters::Vector{ParameterLabel}: A vector of TB parameter labels.\nparameter_values::Vector{Float64}: A vector of corresponding TB parameter values.\nion_types::Vector{String}: A vector of ion types for which SOC parameters are defined (if any).\nsoc_parameters::Vector{Float64}: A vector of SOC parameters corresponding to the ion_types (if any).\nconf_values::Dict{String, String}: A dictionary containing the configuration values from the header section (if present), such as system type, rcut, onsite, etc.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.same_param_label-NTuple{4, Any}","page":"Library","title":"Hamster.same_param_label","text":"same_param_label(nnlabel::Int64, ion_label::IonLabel, overlap_label::SVector{3, Int64}, param_label::ParameterLabel) -> Bool\n\nCheck if the given nearest-neighbor label (nnlabel), ion label (ion_label), and overlap label (overlap_label) are the same as those in the param_label.\n\nArguments\n\nnnlabel::Int64: The nearest-neighbor label to compare with the nnlabel in param_label.\nion_label::IonLabel: The ion label to compare with the ion_label in param_label.\noverlap_label::SVector{3, Int64}: The overlap label to compare with the overlap_label in param_label.\nparam_label::ParameterLabel: The parameter label to compare against.\n\nReturns\n\nBool: Returns true if all components (nnlabel, ion_label, overlap_label) match those of the given param_label, otherwise returns false.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.string_to_param_label-Tuple{Any}","page":"Library","title":"Hamster.string_to_param_label","text":"string_to_param_label(string_label)\n\nConvert a string parameter label string_label to a ParameterLabel.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.write_params","page":"Library","title":"Hamster.write_params","text":"write_params(parameters::Vector, parameter_values::Vector, ion_types::Vector=[], soc_parameters::Vector=[], conf::Config=get_empty_config(); filename=\"params\")\nwrite_params(parameters, parameter_values, conf::Config; filename=\"params\")\n\nWrites the tight-binding (TB) parameters, system configuration, and optional spin-orbit coupling (SOC) parameters to a .dat file.\n\nArguments\n\nparameters::Vector: A vector of TB parameter labels (ParameterLabel) that describe the system.\nparameter_values::Vector: A vector of parameter values corresponding to the parameters.\nion_types::Vector=[]: A vector of ion types for which SOC parameters are defined (optional).\nsoc_parameters::Vector=[]: A vector of SOC parameters corresponding to the ion types (optional).\nconf::Config: A configuration object that holds various settings for the system (e.g., system type, rcut, onsite, etc.).\nfilename::String=\"params\": The base filename (without extension) for the output file (optional, default is \"params\").\n\nKeyword Arguments\n\nfilename: The name of the file (excluding the extension) to which the data will be written (default: \"params\").\n\nFile Format\n\nThe file written contains the following:\n\nSystem configuration block: Includes details like rcut, onsite, sepNN, and alpha/n values for each unique ion type.\nTight-binding parameters: Parameters and corresponding values, formatted to align in a readable manner.\nSOC parameters (optional): SOC values for each ion type, if provided.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.distance_dependence-NTuple{5, Any}","page":"Library","title":"Hamster.distance_dependence","text":"distance_dependence(ME::MatrixElement, orbconfig::OrbitalConfiguration, r, ns, αs)\n\nComputes the distance-dependent interaction between two orbitals, based on their matrix element ME and orbital configuration orbconfig.\n\nArguments\n\nME::MatrixElement: The matrix element representing the interaction type.\norbconfig::OrbitalConfiguration: The configuration of the orbitals involved in the interaction, which determines the orbital angular momenta.\nr: The distance between the two orbitals in the interaction.\nns: A vector containing the quantum numbers n for the two orbitals.\nαs: A vector containing the exponential decay factors α for the two orbitals.\n\nReturns\n\nThe integral I of the overlap function between the two orbitals over the given distance r, modified by a sign factor if necessary.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.fcut-Tuple{Any, Any}","page":"Library","title":"Hamster.fcut","text":"fcut(r, rcut)\n\nCut-off function whose value smoothly transitions to zero as r approaches rcut. Ensures continuity by using a cosine-based smoothing function.\n\nArguments\n\nr: The input distance.\nrcut: The cutoff radius beyond which the function returns zero.\nrcut_tol: A tolerance applied to the cut-off radius, can be positive or negative.\n\nReturns\n\nA smoothly varying value between 1 and 0, with fcut(r, rcut) = 0 for r > rcut.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_rllm","page":"Library","title":"Hamster.get_rllm","text":"get_rllm(overlaps, conf=get_empty_config(); load_rllm=get_load_rllm(conf), rllm_file=get_rllm_file(conf), interpolate_rllm=get_interpolate_rllm(conf))\n\nRetrieves or computes the radial orbital integral look-up table (RLLM) for a given set of overlaps, based on configuration settings.\n\nArguments\n\noverlaps::Vector: A list of overlap objects for which RLLM data is required.\nconf::Config: Configuration object controlling the behavior of RLLM retrieval or generation. Defaults to an empty configuration.\nload_rllm::Bool: (Keyword argument) If true, load the RLLM data from a file. The file location is provided by rllm_file. Defaults to the value from conf.\nrllm_file::String: (Keyword argument) Filename for loading or saving the RLLM data. Defaults to the value from conf.\ninterpolate_rllm::Bool: (Keyword argument) If true, interpolate new RLLM data based on the overlaps and save it to a file. Defaults to the value from conf.\n\nReturns\n\nrllm_dict::Dict{String, CubicSpline}: A dictionary mapping overlap string representations to cubic spline interpolations of the radial integrals. If load_rllm is true, the data is read from the file. If interpolate_rllm is true, it is interpolated and saved.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.interpolate_overlap-Tuple{Any, Config}","page":"Library","title":"Hamster.interpolate_overlap","text":"interpolate_overlap!(overlap, conf::Config)\n\nInterpolates an overlap and stores the resulting cubic spline in the overlap's rllm field.\n\nArguments\n\noverlap: An overlap object that contains information about the interaction type and orbital configuration.\nconf::Config: A configuration object that provides values for parameters such as n and α for each ion type involved in the overlap.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.read_rllm","page":"Library","title":"Hamster.read_rllm","text":"read_rllm(filename=\"rllm.dat\") -> Dict{String, Tuple{Vector{Float64}, Vector{Float64}}}\n\nReads the rllm.dat file and returns a dictionary mapping overlap labels to tuples of vectors containing the x and y values.\n\nArguments\n\nfilename::String: The name of the file containing Rllm data. Defaults to \"rllm.dat\".\n\nReturns\n\nA dictionary where each key is an overlap label, and each value a tuple of x/y value vectors.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.save_rllm-Tuple{Any}","page":"Library","title":"Hamster.save_rllm","text":"save_rllm(overlaps; filename=\"rllm.dat\")\n\nSaves overlap data, including the associated Rllm values, to a file.\n\nArguments\n\noverlaps: A collection of overlap objects, where each overlap contains an rllm field with xs (x values) and ys (y values).\nfilename::String: The name of the file where the Rllm data will be saved. Defaults to \"rllm.dat\".\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.fs-Tuple{Any, Any, Hamster.Angular}","page":"Library","title":"Hamster.fs","text":"Define rotation coefficients.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_base_orb-Union{Tuple{Tuple{A1, A2}}, Tuple{A2}, Tuple{A1}} where {A1, A2<:Hamster.Angular}","page":"Library","title":"Hamster.get_base_orb","text":"baseorb logic\n\nThe baseorb of px, py, pz should be the same since since one can transform one into  the other by rotation.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.Angular","page":"Library","title":"Hamster.Angular","text":"Angular\n\nAngular parts of real atomic orbitals.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.OrbitalFunction","page":"Library","title":"Hamster.OrbitalFunction","text":"(orb::OrbitalFunction)(r⃗)\n\nEvaluate the orbital orb at the point r⃗, which can be one- or two-dimensional or a tuple including the norm.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Overlap","page":"Library","title":"Hamster.Overlap","text":"Overlap(Ψ₁, r⃗₁, Ψ₂, r⃗₂)\n\nStruct to calculate the overlap integral between two wavefunctions with centers r⃗₁ and r⃗₂.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Radial","page":"Library","title":"Hamster.Radial","text":"Radial\n\nRadial parts for atomic s orbitals with n=1,2,3,4,5,6.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.get_spherical-Tuple{Any, Any}","page":"Library","title":"Hamster.get_spherical","text":"get_spherical(l, m)\n\nReturns the spherical harmonic function for a given orbital angular momentum quantum number l and magnetic quantum number m.\n\nArguments\n\nl::Int: The orbital angular momentum quantum number (l = 0 for s, l = 1 for p, l = 2 for d, etc.).\nm::Int: The magnetic quantum number, which ranges from -l to l.\n\nReturns\n\nThe corresponding spherical harmonic function as a vector, based on the values of l and m.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.str_to_orb-Tuple{Any}","page":"Library","title":"Hamster.str_to_orb","text":"str_to_orb(str::String)\n\nConvert an orbital name given as a string to its corresponding orbital object.\n\nArguments\n\nstr::String: The name of the orbital as a string. Valid strings include \"s\", \"px\", \"py\", \"pz\", \"dz2\", \"dxy\", \"dxz\", \"dyz\", \"dx2_y2\", \"sp3\", \"sp3dr2\", \"pxdx2\", \"pydy2\", and \"pzdz2\".\n\nReturns\n\nOrbital: The corresponding orbital object based on the input string.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Structure","page":"Library","title":"Structure","text":"","category":"section"},{"location":"library/library/#Hamster.PointGrid","page":"Library","title":"Hamster.PointGrid","text":"PointGrid(rs_ion, Ts, conf::TBConfig) -> PointGrid\n\nConstructs a PointGrid for managing atomic positions within a 3D simulation cell. \n\nThe function takes atomic positions rs_ion, lattice translation vectors Ts, and a TBConfig configuration object as input, and returns a PointGrid object that organizes these atomic positions into a grid of cubic cells.\n\nArguments:\n\nrs_ion: A collection (e.g., array) of atomic positions in real space.\nTs: A collection of lattice translation vectors, typically used for defining the periodic boundaries of the simulation cell.\nconf::Config: A configuration object containing parameters necessary for setting up the PointGrid, such as the grid size.\n\nReturns:\n\nPointGrid: A PointGrid object that partitions the real-space simulation cell into a grid and maps atomic positions to these grid cells.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.PointGrid-2","page":"Library","title":"Hamster.PointGrid","text":"PointGrid\n\nA data structure for organizing and managing points in a 3D simulation cell by dividing the space into equally-sized cubic boxes. \n\nThe PointGrid structure stores grid points for atom positions, allowing for efficient spatial queries and neighbor searches.\n\nFields:\n\ngrid_size::Float64: The size of each cubic grid cell in real space.\ndict0::Dict{SVector{3, Int64}, Vector{Int64}}: A dictionary that maps grid cell indices to a vector of point indices (e.g., atoms) within that cell.\ndictR::Dict{SVector{3, Int64}, Vector{Tuple{Int64, Int64}}}: A dictionary that maps grid cell indices to a vector of tuples. Each tuple contains an atom index and a corresponding replica index, facilitating the handling of periodic boundary conditions.\nnum_points::Int64: The total number of points (e.g., atoms) managed by the grid.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.get_grid_dict-Tuple{Any, Any, Any}","page":"Library","title":"Hamster.get_grid_dict","text":"get_grid_dict(rs, Ts, grid_size; δrs=zeros(3, size(rs, 2)))\n\nConstructs a point grid for ion positions rs, considering all translation vectors Ts.\n\nArguments\n\nrs::AbstractMatrix: A 3×N matrix where each column represents the position of an ion in 3D space.\nTs::AbstractMatrix: A 3×M matrix where each column represents a translation vector.\ngrid_size::Real: The size of the grid cells used to map the ion positions and their translations.\n\nReturns\n\ngrid_dict::Dict{SVector{3, Int64}, Vector{Tuple{Int64, Int64}}}:    A dictionary where the keys are grid points (represented as static 3D integer vectors SVector{3, Int64}),   and the values are vectors of tuples (iion, R), where iion is the index of the ion and R is the index of the translation vector.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_grid_dict-Tuple{Any, Any}","page":"Library","title":"Hamster.get_grid_dict","text":"get_grid_dict(rs, grid_size)\n\nConstructs a spatial grid based on the ion positions rs, mapping each position to a grid point determined by grid_size.\n\nArguments\n\nrs::AbstractMatrix: A 3×N matrix where each column represents the position of an ion in 3D space.\ngrid_size::Real: The size of the grid cells used to map the ion positions.\n\nReturns\n\ngrid_dict::Dict{SVector{3, Int64}, Vector{Int64}}:    A dictionary where the keys are grid points (represented as static 3D integer vectors SVector{3, Int64}),   and the values are vectors of ion indices corresponding to the ions located at that grid point.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_grid_point-Tuple{Any, Any}","page":"Library","title":"Hamster.get_grid_point","text":"get_grid_point(r⃗, grid_size) -> SVector{3, Int64}\n\nCalculate the grid point corresponding to a given position vector r⃗ based on a specified grid size.\n\nArguments\n\nr⃗: A 3D position vector, typically represented as an SVector{3, Float64} or similar type, indicating the coordinates in space.\ngrid_size: A scalar value representing the size of each grid cell. This is used to determine which grid point the position r⃗ belongs to.\n\nReturns\n\nAn SVector{3, Int64} representing the grid point. The grid point is computed by dividing each component of r⃗ by grid_size, flooring the result to obtain the integer grid coordinates.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.iterate_nn_grid_points-Tuple{Any, Hamster.PointGrid}","page":"Library","title":"Hamster.iterate_nn_grid_points","text":"iterate_nn_grid_points(grid_point, point_grid::PointGrid)\n\nFind and return all neighboring grid points of a given grid_point within the specified point grid and gather the associated ion indices and translation vectors.\n\nArguments\n\ngrid_point: A grid point represented as a tuple (or similar structure), indicating the current grid position for which neighboring points are being queried.\npoint_grid::PointGrid: A PointGrid object containing information about the point grid, including the ions' positions and the translation vectors.\n\nReturns\n\nall_inds::Vector{Tuple{Int64, Int64}}: A vector of tuples, where each tuple contains:\nThe index of the ion (iion) corresponding to a nearby grid point.\nThe translation vector (R) for that ion.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.iterate_nn_grid_points-Tuple{Hamster.PointGrid}","page":"Library","title":"Hamster.iterate_nn_grid_points","text":"iterate_nn_grid_points(point_grid::PointGrid)\n\nIterates over nearest-neighbor (NN) grid points in a given PointGrid and collects indices of ion pairs and translation vectors.\n\nArguments\n\npoint_grid::PointGrid: A PointGrid object containing the initial grid points and the corresponding indices of ions.\n\nReturns\n\nall_inds::Vector{Tuple{Int64, Int64, Int64}}: A vector of tuples where each tuple consists of:\niion1::Int64: Index of the first ion in the current grid point.\niion2::Int64: Index of the second ion in the neighboring grid point.\nR::Int64: Index of the translation vector between the current grid point and its nearest neighbor.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.nn_grid_points-Tuple{Any, Any}","page":"Library","title":"Hamster.nn_grid_points","text":"nn_grid_points(grid_point, grid_dict) -> Vector{SVector{3, Int64}}\n\nReturns a vector of grid points that are nearest neighbors to the given grid_point.\n\nThis function computes the nearest-neighbor grid points in a 3D grid by considering all adjacent grid cells in the 3x3x3 neighborhood centered around grid_point. It checks for the existence of each neighbor in the provided grid_dict before including it in the result.\n\nArguments:\n\ngrid_point: An SVector{3, Int64} representing the coordinates of the grid point for which nearest neighbors are sought.\ngrid_dict: A dictionary (Dict{SVector{3, Int64}, ...}) where the keys are grid points in the form of SVector{3, Int64}. This dictionary is used to determine if a neighbor grid point exists.\n\nReturns:\n\nVector{SVector{3, Int64}}: A vector containing the nearest-neighbor grid points of the specified grid_point that are present in the grid_dict.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.push_grid_point!-Tuple{Any, Any, Any}","page":"Library","title":"Hamster.push_grid_point!","text":"push_grid_point!(grid_dict, grid_point, point_info)\n\nAdd or update an entry in the grid dictionary with a specified grid point.\n\nArguments\n\ngrid_dict::Dict: A dictionary where keys are grid points (e.g., SVector{3, Int64}) and values are lists of associated points or indices.\ngrid_point: The key representing the grid point in the dictionary. Typically a static vector or tuple indicating the grid coordinates.\npoint_info: The value to associate with the grid_point. Often this is an index, tuple of indices, or other relevant information.\n\nDetails\n\nIf the grid_point key already exists in grid_dict, the point_info is appended to the existing list of values. If the grid_point does not exist, a new entry is created with point_info as the first element in the list.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.Ion","page":"Library","title":"Hamster.Ion","text":"Ion\n\nA mutable structure representing an ion in a crystal lattice.\n\nFields\n\ntype::String: The type or species of the ion, usually denoted by its chemical symbol (e.g., \"Na\" for sodium, \"Cl\" for chlorine).\npos::StaticArray{3, Float64}: A 3D static array representing the position of the ion in Cartesian coordinates.\ndist::StaticArray{3, Float64}: A 3D static array representing any distortion applied to the ion's position.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.findnext_ion_of_type-Tuple{Any, Vector{Ion}}","page":"Library","title":"Hamster.findnext_ion_of_type","text":"findnext_ion_of_type(type, ions::Vector{Ion}) -> Int64\n\nFind the index of the next ion in the vector Ions that has the specified type.\n\nArguments:\n\ntype: The type of ion to search for. This could be a string, integer, or any other type that represents an ion type.\nIons: A vector of Ion objects, where each Ion has a type field that specifies its ion type.\n\nReturns:\n\nThe index iion of the first ion in ions whose type matches the input type. \nIf no ion with the specified type is found, the function returns 0.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_ion_positions-Tuple{Vector{Ion}}","page":"Library","title":"Hamster.get_ion_positions","text":"get_ion_positions(ions::Vector{Ion}) :: Vector{SVector{3, Float64}}\n\nRetrieve the positions of all ions in a given vector of Ion objects.\n\nArguments\n\nions::Vector{Ion}: A vector of Ion objects, where each Ion contains information about its type, position, and distortion.\n\nReturns\n\nVector{SVector{3, Float64}}: A vector of SVector{3, Float64} where each element represents the 3D Cartesian coordinates of an ion.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_ion_types-Tuple{Vector{Ion}}","page":"Library","title":"Hamster.get_ion_types","text":"get_ion_types(ions::Vector{Ion}; uniq=false, sorted=false)\n\nReturn an array containing the types of all ions in the vector ions.\n\nArguments\n\nions::Vector{Ion}: A vector of Ion instances, each containing information about an ion's type, position, and distortion.\nuniq::Bool=false: If true, the returned array contains only unique ion types.\nsorted::Bool=false: If true, the returned array is sorted in alphabetical order.\n\nReturns\n\nVector{String}: An array of ion types. The array will contain all ion types present in the input vector ions. If uniq is set to true, only unique types will be included. If sorted is set to true, the types will be sorted alphabetically.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_ions","page":"Library","title":"Hamster.get_ions","text":"get_ions(positions, types, distortions=zeros(3, size(positions, 2)))\n\nCreate a vector of Ion instances from given positions, types, and distortions.\n\nArguments\n\npositions::AbstractMatrix{T}: A matrix where each column represents the 3D position of an ion in Cartesian coordinates.\ntypes::AbstractVector{String}: A vector of strings representing the type or species of each ion, corresponding to the columns of positions.\ndistortions::AbstractMatrix{T}: A matrix where each column represents the 3D distortion vector applied to the corresponding ion's position. Defaults to a matrix of zeros.\n\nReturns\n\nVector{Ion}: A vector of Ion instances, each containing the type, position, and distortion of an ion.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.findR0-Tuple{Any}","page":"Library","title":"Hamster.findR0","text":"findR0(Rs::Matrix{<:Number})\n\nFinds the index of the translation vector [0, 0, 0] in the matrix Rs.\n\nArguments\n\nRs::Matrix{<:Number}: A 3xN matrix where each column represents a translation vector.\n\nReturns\n\nR::Int: The index of the column in Rs that contains the vector [0, 0, 0]. If the vector [0, 0, 0] is not found, returns 0.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_Rmax","page":"Library","title":"Hamster.get_Rmax","text":"get_Rmax(lattice, conf=get_empty_config(); rcut=get_rcut(conf), Rmax=get_Rmax(conf), upperR=10)\n\nDetermines the maximum radius Rmax for the given lattice and configuration parameters based on the cutoff radius rcut.\n\nArguments\n\nlattice: The lattice parameters used to convert fractional to Cartesian coordinates.\nconf: (Optional) Configuration object. Defaults to get_empty_config().\nrcut: (Optional) The cutoff radius used to determine the maximum radius. Defaults to get_rcut(conf).\nRmax: (Optional) Initial guess for the maximum radius. Defaults to get_Rmax(conf).\nupperR: (Optional) Upper limit for the search radius. Defaults to 10.\n\nReturns\n\nRmax::Int: The maximum radius such that the spherical region of radius Rmax contains all points within the cutoff radius rcut.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.get_translation_vectors","page":"Library","title":"Hamster.get_translation_vectors","text":"get_translation_vectors(rs_ion, lattice, conf=get_empty_config(); Rmax=get_Rmax(lattice, conf), rcut=get_rcut(conf))\n\nGenerate a set of translation vectors based on ion positions rs_ion, the lattice vectors lattice, and optional configuration settings. The function returns the translation vectors that satisfy the maximum interatomic distance rcut, which is determined from the configuration or can be manually specified.\n\nArguments\n\nrs_ion::AbstractMatrix: Matrix of ion positions in fractional coordinates. Each column represents the position of an ion.\nlattice::AbstractMatrix: Lattice vectors of the system, where each column represents a lattice vector.\nconf::Config: (Optional) Configuration object containing settings like Rmax and rcut. Defaults to an empty configuration.\nRmax::Int64: (Optional) Maximum entry magnitude for the initial set of translation vectors. Defaults to the value from the configuration.\nrcut::Float64: (Optional) Maximum interatomic distance. If set to 0, all initial translation vectors will be returned. Defaults to the value from the configuration.\n\nReturns\n\nAbstractMatrix: A matrix containing the translation vectors as columns. The vectors are filtered based on the rcut value to include only those within the specified interatomic distance.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.get_translation_vectors-Tuple{Int64}","page":"Library","title":"Hamster.get_translation_vectors","text":"get_translation_vectors(M::Int64)\n\nGenerate a set of translation vectors within a cubic grid defined by the maximum entry magnitude M.\n\nArguments\n\nM::Int64: The maximum magnitude of the entries in the translation vectors. The resulting grid will include all integer vectors where each component is in the range -M to M.\n\nReturns\n\nRs::Matrix{Float64}: A 3xN matrix where N is the total number of translation vectors. Each column of Rs represents a translation vector with components within the specified magnitude range.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_nearest_neighbors-Tuple{Any, Any, Any, Hamster.PointGrid}","page":"Library","title":"Hamster.get_nearest_neighbors","text":"get_nearest_neighbors(r0, rs, Ts, point_grid::PointGrid; kNN=1, sorted=false)\n\nFind the nearest neighbors (NN) of a given point r0 within a set of points rs and translation vectors Ts.\n\nArguments\n\nr0::AbstractVector{T}: The reference point in 3D space for which the nearest neighbors are to be found.\nrs::AbstractMatrix{T}: A 3xN matrix where each column represents a 3D point in space. These are the potential neighbors.\nTs::AbstractMatrix{T}: A 3xM matrix where each column is a 3D translation vector. These vectors are applied to the points in rs to account for periodic boundary conditions.\npoint_grid::PointGrid: A PointGrid structure used for efficient neighbor searching, containing a grid size and a dictionary of grid points.\nkNN::Int: The number of nearest neighbors to find. Defaults to 1.\n\nReturns\n\nr_NN::Matrix{Float64}: A 3xkNN matrix where each column represents the 3D coordinates of one of the kNN nearest neighbors to r0.\n\nDescription\n\nThis function computes the nearest neighbors of a point r0 by:\n\nLocating the grid point corresponding to r0 in the point_grid.\nIterating over the neighboring grid points to compute distances to all potential neighbor points in rs shifted by translation vectors in Ts.\nSorting these distances to identify the kNN closest neighbors.\nReturning the positions of these nearest neighbors in a matrix.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_nn_thresholds","page":"Library","title":"Hamster.get_nn_thresholds","text":"get_nn_thresholds(ions, Ts, point_grid, conf=get_empty_config(); sepNN=get_sepNN(conf))\n\nCalculate nearest-neighbor distance thresholds for pairs of ions based on their positions and types, returning a dictionary of IonLabel keys and corresponding minimum distances.\n\nArguments\n\nions: A list of ion objects. Each ion contains its position and type.\nTs: A transformation matrix used for periodic boundary conditions.\npoint_grid: A grid of points to iterate over for calculating neighbor distances.\nconf: A configuration object (optional). Default is get_empty_config().\nsepNN: A Boolean flag (optional). If true, separate NN thresholds are calculated for each ion pair. If false, all ion pairs are treated uniformly. Default is get_sepNN(conf).\n\nKeyword Arguments\n\nsepNN: Whether to compute separate NN distances for different ion pairs. Default is get_sepNN(conf).\n\nReturns\n\nNN_dict::Dict{IonLabel, Float64}: A dictionary where each key is an IonLabel representing a pair of ion types, and the value is the minimum nearest-neighbor distance for that pair.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.get_sk_transform_matrix-NTuple{4, Any}","page":"Library","title":"Hamster.get_sk_transform_matrix","text":"get_sk_transform_matrix(r⃗₁, r⃗₂, axis, tmethod)\n\nReturns a transformation matrix that aligns the z-axis along the vector connecting  r⃗₁ and r⃗₂. The method of transformation depends on tmethod.\n\nArguments\n\nr⃗₁::AbstractVector: The first position vector.\nr⃗₂::AbstractVector: The second position vector.\naxis::AbstractVector: A vector used to define the x-axis in case of Gram-Schmidt transformation.\ntmethod::String: The transformation method. \n\nReturns\n\nÊ::AbstractMatrix: The 3x3 transformation matrix that aligns the z-axis with the vector  between r⃗₁ and r⃗₂.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_transformed_system-Tuple{Any, Any, Any}","page":"Library","title":"Hamster.get_transformed_system","text":"get_transformed_system(r⃗₁, r⃗₂, ω; ϵ=1e-5)\nget_transformed_system(r⃗₁, r⃗₂)\n\nConstruct a new orthonormal coordinate system based on two vectors r⃗₁ and r⃗₂,  with the z-axis oriented along the vector connecting r⃗₁ and r⃗₂. Optionally, a  third vector ω can be provided to influence the initial guess for the x-axis.\n\nArguments\n\nr⃗₁::Vector: A 3D vector representing the first position.\nr⃗₂::Vector: A 3D vector representing the second position.\nω::Vector: (Optional) A 3D vector used as the initial guess for the x-axis orientation.  If ω is omitted, the function assumes a default method for constructing the x-axis.\nϵ::Float64=1e-5: (Optional) A small tolerance value to handle near-zero differences and near-parallel vectors.\n\nReturns\n\nA 3x3 matrix Ê where the rows correspond to the new x-axis, y-axis, and z-axis of the coordinate system.\n\nDetails\n\nZ-axis (ez): Always aligned with the normalized vector r⃗₂ - r⃗₁. If this vector is zero or near-zero  (within tolerance ϵ), the z-axis defaults to [0, 0, 1].\nX-axis (ex): If ω is provided, the x-axis is constructed from the projection of ω orthogonal to the  z-axis and is normalized. If ω is omitted, an alternative method will define the x-axis.\nY-axis (ey): Always computed as the cross-product of the z-axis and x-axis, ensuring orthogonality and  completeness of the coordinate system.\nFallback behavior: If ω is nearly parallel to the z-axis within tolerance ϵ, the function reverts to  the simpler version get_transformed_system(r⃗₁, r⃗₂) to handle the ambiguity in the x-axis.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.rotation_matrix_around_axis-Union{Tuple{T}, Tuple{AbstractVector{T}, T}} where T","page":"Library","title":"Hamster.rotation_matrix_around_axis","text":"rotation_matrix_around_axis(u⃗::AbstractVector{T}, θ::T) where T\n\nConstructs a 3x3 rotation matrix that rotates by an angle θ around an arbitrary axis u⃗, using Rodrigues' rotation formula.\n\nArguments\n\nu⃗::AbstractVector{T}: A 3D unit vector (axis of rotation) where T is a numeric type.\nθ::T: The angle of rotation (in radians) around the axis u⃗.\n\nReturns\n\nA 3x3 static matrix representing the rotation around the axis u⃗ by angle θ.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.Structure","page":"Library","title":"Hamster.Structure","text":"Structure(conf=get_empty_config(); poscar_path=get_poscar(conf), rcut=get_rcut(conf), grid_size=get_grid_size(conf))\n\nCreate a Structure instance from a POSCAR file.\n\nArguments\n\nconf: A Config instance that contains various parameters.\nposcar_path: The file path to the POSCAR file.\nrcut: The cutoff radius for interactions to be taken into account.\ngrid_size: The size of the grid used in the PointGrid for efficient neighbor searching.\n\nReturns\n\nStructure: A Structure instance.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Structure-2","page":"Library","title":"Hamster.Structure","text":"Structure\n\nA data structure representing a crystal structure, including its lattice vectors, atomic positions, and a point grid for efficient neighbor searching.\n\nFields\n\nlattice::Matrix{Float64}: A 3x3 matrix representing the lattice vectors of the crystal. Each column corresponds to a lattice vector.\nRs::Matrix{Float64}: A matrix where each column represents the position of a lattice translation vector in fractional coordinates.\nions::Vector{Ion}: A vector containing the ions in the structure. Each Ion includes information like the type of ion, its position, and possibly its distortion from the equilibrium.\npoint_grid::PointGrid: A data structure used for efficiently finding neighboring ions based on their positions.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Structure-Union{Tuple{M4}, Tuple{M3}, Tuple{M2}, Tuple{M1}, Tuple{M1, M2, M3, Any, M4}, Tuple{M1, M2, M3, Any, M4, Config}} where {M1, M2, M3, M4<:Matrix{Float64}}","page":"Library","title":"Hamster.Structure","text":"Structure(Rs, rs_ion, δrs_ion, ion_types, lattice, conf=get_empty_config(); rcut=get_rcut(conf), grid_size=get_grid_size(conf))\nStructure(Rs, rs_ion, ion_types, lattice, conf=get_empty_config(); rcut=get_rcut(conf), grid_size=get_grid_size(conf))\n\nCreate a Structure instance from atomic information.\n\nArguments\n\nRs: A 3xNR matrix representing the set of lattice translation vectors.\nrs_ion: A 3xNion matrix representing the coordinates of the ions in the unit cell.\nδrs_ion: (Optional) A 3xNion matrix representing atomic displacements from rs_ion. Defaults to a zeros.\nion_types: A vector representing the types of ions in the unit cell.\nlattice: A 3x3 matrix representing the lattice vectors of the crystal.\nconf: (Optional) A Config instance.\nrcut: The cutoff radius for interactions to be taken into account.\ngrid_size: The size of the grid used in the PointGrid for efficient neighbor searching.\n\nReturns\n\nStructure: A Structure instance.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_config_index_sample","page":"Library","title":"Hamster.get_config_index_sample","text":"get_config_index_sample(conf=get_empty_config(); Nconf=get_Nconf(conf), Nconf_min=get_Nconf_min(conf), Nconf_max=get_Nconf_max(conf), val_ratio=get_val_ratio(conf))\n\nRandomly selects training and validation configuration indices from a given range of configurations.\n\nArguments\n\nconf: (Optional) A configuration object from which all other parameters may be derived. Defaults to an empty configuration.\nNconf: (Optional) The number of configurations to sample for training. Derived from conf if not specified.\nNconf_min: (Optional) The minimum configuration index. Derived from conf if not specified.\nNconf_max: (Optional) The maximum configuration index. Derived from conf if not specified.\nvalidate: (Optional) Boolean flag indicating whether validation should be performed. Derived from conf if not specified.\nval_ratio: (Optional) Ratio of validation configurations to training configurations. Used only if train_mode == val_mode.\ntrain_mode: (Optional) Mode identifier for training configurations. Derived from conf.\nval_mode: (Optional) Mode identifier for validation configurations. Derived from conf.\n\nReturns\n\ntrain_config_inds: A vector of indices for training configurations.\nval_config_inds: A vector of indices for validation configurations.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.get_structures","page":"Library","title":"Hamster.get_structures","text":"get_structures(conf=get_empty_config(); index_file=\"config_inds.dat\", xdatcar=get_xdatcar(conf), sc_poscar=get_sc_poscar(conf))\n\nGenerates a list of Structure objects based on the configurations from an XDATCAR file (or an h5 file) and the initial POSCAR structure. \n\nArguments\n\nconf: A configuration object, typically used to store simulation parameters. By default, it calls get_empty_config().\nindex_file: A string specifying the filename containing the configuration indices. If this file exists, the configuration indices are read from it. If not, they are sampled using get_config_index_sample().\nxdatcar: The path to the XDATCAR file, containing configuration data for the system. \nsc_poscar: The path to the POSCAR file, representing the initial supercell structure.\n\nReturns\n\nstrcs: A vector of Structure objects. Each structure represents the ion positions and their displacements relative to the initial configuration.\nconfig_indices: The indices of the configurations used to create the structures.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.split_indices_into_chunks-Union{Tuple{T}, Tuple{AbstractVector{T}, Any}} where T","page":"Library","title":"Hamster.split_indices_into_chunks","text":"split_indices_into_chunks(indices, nchunks; rank=0)\n\nSplits a collection of indices into nchunks approximately equal-sized chunks and returns the chunk corresponding to the specified rank.\n\nArguments\n\nindices::AbstractVector: The collection of indices to be split.\nnchunks::Int: The number of chunks to divide the indices into.\nrank::Int=0: The rank (0-based) specifying which chunk to return. Defaults to 0.\n\nReturns\n\nAbstractVector: The chunk of indices corresponding to the specified rank. If the rank exceeds the number of chunks, an empty array of type Int64[] is returned.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.calc_angle-Tuple{Any, Any}","page":"Library","title":"Hamster.calc_angle","text":"calc_angle(v1, v2; ϵ=1e-5)\n\nCalculate the angle between two vectors v1 and v2 in radians. \n\nArguments:\n\nv1: First vector (can be any dimensionality as long as it matches v2).\nv2: Second vector (same dimensionality as v1).\nϵ: Small tolerance value to ensure that the norm of the vectors is sufficiently large to avoid division by zero (default: 1e-5).\n\nReturns:\n\nThe angle in radians between v1 and v2, calculated using the dot product.  If either vector's norm is less than ϵ, the function returns 0..\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_rotated_angles-Tuple{Any, Any}","page":"Library","title":"Hamster.get_rotated_angles","text":"get_rotated_angles(Û, r⃗)\n\nCalculate the spherical angles (θ, φ) for a vector r⃗ after it is rotated by the matrix Û.\n\nArguments\n\nÛ::AbstractMatrix{T}: A 3x3 rotation matrix that transforms the vector r⃗.\nr⃗::AbstractVector{T}: A 3D vector to be rotated, where T is a numeric type.\n\nReturns\n\nθ::T: The polar (zenith) angle, measured from the z-axis, in radians.\nφ::T: The azimuthal angle, measured from the x-axis in the xy-plane, in radians.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.normdiff-Union{Tuple{W}, Tuple{V}, Tuple{V, W}} where {V, W<:(AbstractVector)}","page":"Library","title":"Hamster.normdiff","text":"normdiff(v⃗::AbstractVector, w⃗::AbstractVector)\nnormdiff(v⃗::AbstractVector, w⃗::AbstractVector, t⃗::AbstractVector)\nnormdiff(v⃗::AbstractVector, w⃗::AbstractVector, δv⃗::AbstractVector, δw⃗::AbstractVector, t⃗::AbstractVector)\n\nCompute the Euclidean norm (L2 distance) between two vectors v⃗ and w⃗, optionally with displacement vectors δv⃗ and δw⃗ and lattice translation vector t⃗.\n\nArguments\n\nv⃗::AbstractVector: The first vector.\nw⃗::AbstractVector: The second vector.\nδv⃗::AbstractVector: The first displacement vector.\nδw⃗::AbstractVector: The second displacement vector.\nt⃗::AbstractVector: The lattice translation vector.\n\nReturns\n\nFloat64: The Euclidean norm of the difference between vectors v and w.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.proj-Tuple{Any, Any}","page":"Library","title":"Hamster.proj","text":"proj(u⃗, v⃗)\n\nCalculate the projection of the vector v⃗ onto the vector u⃗.\n\nArguments\n\nu⃗::AbstractVector: The vector onto which the projection is calculated.\nv⃗::AbstractVector: The vector being projected onto u⃗.\n\nReturns\n\nAbstractVector: The projection of v⃗ onto u⃗.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.transform_basis-Tuple{Any, Any}","page":"Library","title":"Hamster.transform_basis","text":"transform_basis(r⃗::AbstractVector, Ê::AbstractMatrix) -> AbstractVector\n\nTransforms a vector to a new basis using a given transformation matrix.\n\nThis function takes a vector r⃗ and transforms it into a new basis by applying the transformation matrix Ê. The transformation is performed by multiplying the matrix Ê with the vector r⃗, yielding the transformed vector.\n\nArguments:\n\nr⃗::AbstractVector: The vector to be transformed. This represents coordinates or a state in the original basis.\nÊ::AbstractMatrix: The transformation matrix that defines the new basis. This matrix should have dimensions compatible with the vector r⃗.\n\nReturns:\n\nAbstractVector: The transformed vector in the new basis, obtained by multiplying Ê with r⃗.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.transform_to_spherical-Tuple{AbstractMatrix{Float64}}","page":"Library","title":"Hamster.transform_to_spherical","text":"transform_to_spherical(r⃗::AbstractArray{Float64, 2}; origin=[0, 0, 0]) -> AbstractMatrix{Float64}\n\nConverts a set of Cartesian coordinates to spherical coordinates relative to a specified origin.\n\nThis function takes a 3xN matrix r⃗, where each column represents a point in Cartesian coordinates (x, y, z), and transforms these points into spherical coordinates (r, θ, φ). The transformation is performed relative to a specified origin.\n\nArguments:\n\nr⃗::AbstractArray{Float64, 2}: A 3xN matrix where each column represents Cartesian coordinates [x, y, z] of a point.\norigin::AbstractVector{Float64}: A 3-element vector specifying the origin relative to which the spherical coordinates are computed. Default is [0, 0, 0].\n\nReturns:\n\nAbstractMatrix{Float64}: An N×3 matrix where each row contains the spherical coordinates (r, θ, φ) for the corresponding point in the input.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.transform_to_spherical-Tuple{AbstractVector{Float64}}","page":"Library","title":"Hamster.transform_to_spherical","text":"transform_to_spherical(r⃗::AbstractArray{Float64, 1}) -> Tuple{Float64, Float64, Float64}\n\nConverts Cartesian coordinates to spherical coordinates.\n\nThis function takes a 3D vector r⃗ in Cartesian coordinates (x, y, z) and transforms it into spherical coordinates (r, θ, φ). The spherical coordinates are defined as follows:\n\nr: The radial distance from the origin.\nθ: The polar angle, measured from the positive z-axis.\nφ: The azimuthal angle, measured from the positive x-axis in the xy-plane.\n\nArguments:\n\nr⃗::AbstractArray{Float64, 1}: A 3-element vector representing the Cartesian coordinates [x, y, z].\n\nReturns:\n\nTuple{Float64, Float64, Float64}: A tuple containing the spherical coordinates (r, θ, φ).\n\n\n\n\n\n","category":"method"},{"location":"library/library/#TB","page":"Library","title":"TB","text":"","category":"section"},{"location":"library/library/#Hamster.copy_params!-Union{Tuple{H2}, Tuple{H1}, Tuple{H1, H2}} where {H1, H2<:EffectiveHamiltonian}","page":"Library","title":"Hamster.copy_params!","text":"copy_params!(receiving_ham::H1, sending_ham::H2) where {H1,H2<:EffectiveHamiltonian}\n\nCopy parameters from one EffectiveHamiltonian (sending_ham) to another (receiving_ham).\n\nArguments\n\nreceiving_ham: The Hamiltonian object that will receive the parameters.\nsending_ham: The Hamiltonian object providing the parameters to be copied.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_hamiltonian-Tuple{EffectiveHamiltonian, Any, Any}","page":"Library","title":"Hamster.get_hamiltonian","text":"get_hamiltonian(ham::EffectiveHamiltonian, index, ks)\n\nConstruct the Hamiltonian matrix for given k-points ks from the real-space Hamiltonian and lattice vectors.\n\nArguments\n\nham::EffectiveHamiltonian: The effective Hamiltonian object.\nindex::Int: The index of the structure for which the Hamiltonian is to be calculated.\nks: The k-points for which the Hamiltonian matrix is to be calculated.\ncomm (optional): The MPI communicator.\n\nReturns\n\nHk: The Hamiltonian matrix in reciprocal space corresponding to the given k-points.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_hr-Tuple{EffectiveHamiltonian, Any}","page":"Library","title":"Hamster.get_hr","text":"get_hr(ham::EffectiveHamiltonian, index)\n\nRetrieve the real-space Hamiltonian (Hr) by combining contributions from individual models within the EffectiveHamiltonian.\n\nArguments\n\nham::EffectiveHamiltonian: The effective Hamiltonian object.\nindex::Int: The index of the structure for which the Hamiltonian is to be calculated.\n\nReturns\n\nHr: The combined real-space Hamiltonian matrix, obtained by summing the Hamiltonians of all the models in the ham.models tuple.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_sparse_iterator","page":"Library","title":"Hamster.get_sparse_iterator","text":"get_sparse_iterator(strc, basis, conf=get_empty_config(), rcut=get_rcut(conf))\n\nConstructs an iterator that generates sparse matrix indices for interactions within a specified cutoff radius.\n\nArguments\n\nstrc: A structure object containing information about ions, positions, lattice, and grid points.\nbasis: A basis object, containing the orbitals associated with each ion.\nconf: Configuration object, which contains relevant simulation parameters.\nrcut: A cutoff radius, that defines the maximum distance for interactions to be included.\n\nReturns\n\nindices: A vector of vectors, where each sub-vector corresponds to a specific grid point (denoted by R)  and contains tuples (i, j) representing the sparse matrix indices for interactions within the cutoff radius.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.update!-Tuple{EffectiveHamiltonian, Any, Any}","page":"Library","title":"Hamster.update!","text":"update!(ham::EffectiveHamiltonian, opt, dL_dHr)\n\nUpdate the parameters of each model within the EffectiveHamiltonian object using a provided update rule.\n\nArguments\n\nham::EffectiveHamiltonian: The effective Hamiltonian object containing multiple models.\nopt: An optimizer object specifying the update rule (e.g., ADAM).\nmodel_grad: The gradient of the loss w.r.t. the model parameters.\n\nReturns\n\nThis function modifies the ham object in place, updating the parameters of each model it contains.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.write_params-2","page":"Library","title":"Hamster.write_params","text":"write_params(eff_ham::EffectiveHamiltonian, conf)\n\nWrites the parameters of all models contained within an EffectiveHamiltonian.\n\nArguments\n\neff_ham::EffectiveHamiltonian: An EffectiveHamiltonian model.\nconf::Config: A configuration object.\n\nBehavior\n\nIterates through all models within eff_ham and calls write_params(model) for each.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.apply_spin_basis-Tuple{AbstractMatrix}","page":"Library","title":"Hamster.apply_spin_basis","text":"apply_spin_basis(H::AbstractMatrix; alternating_order=false)\n\nExtends a given matrix H to a spin basis (up/down) representation by applying the tensor product with the identity matrix. The order of the tensor product application is controlled by the alternating_order flag which affects the order of spin states in the basis.\n\nArguments:\n\nH::AbstractMatrix: The input matrix to be extended to the spin basis. It should be a square matrix or generally a 2D array.\nalternating_order::Bool=false: A boolean flag that determines the order of applying the spin basis. If true, the order is, e.g., up,down,up,down. If false, the order is, e.g., up,up,down,down.\n\nReturns:\n\nA matrix in the spin basis in the specified order.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.diagonalize-Tuple{AbstractMatrix}","page":"Library","title":"Hamster.diagonalize","text":"diagonalize(Hk::AbstractMatrix; Neig=size(Hk, 1), target=0, method=\"shift-invert\")\n\nFully diagonalizes a Hermitian Hamiltonian matrix Hk and returns the eigenvalues and eigenvectors.\n\nArguments:\n\nHk::AbstractMatrix: A Hermitian matrix (Hamiltonian) to be diagonalized. The matrix should be square and typically complex-valued.\nNeig::Int=size(Hk, 1): The number of eigenvalues and corresponding eigenvectors to compute. Not used.\ntarget::Real=0: The target eigenvalue around which to focus the computation. Not used.\nmethod::String: The method to be used for calculating eigenvalues of a sparse matrix.\n\nReturns:\n\nreal_values::Vector{Float64}: A vector containing the real parts of the eigenvalues of Hk. The eigenvalues are computed using the Hermitian matrix, so they are guaranteed to be real.\neigenvectors::Matrix{ComplexF64}: A matrix where each column is an eigenvector corresponding to an eigenvalue of Hk. The eigenvectors are computed in the standard basis and are complex-valued.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.diagonalize-Tuple{SparseArrays.SparseMatrixCSC}","page":"Library","title":"Hamster.diagonalize","text":"diagonalize(Hk::SparseMatrixCSC; Neig=6, target=0, method=\"shift-invert\")\n\nDiagonalizes a sparse Hermitian matrix Hk to find a specified number of eigenvalues and eigenvectors, optionally focusing on eigenvalues near a given target.\n\nArguments:\n\nHk::SparseMatrixCSC: A sparse Hermitian matrix in compressed sparse column format to be diagonalized. The matrix should be square and Hermitian.\nNeig::Int=6: The number of eigenvalues and corresponding eigenvectors to compute. Defaults to 6, but can be adjusted based on the required precision or size of the spectrum.\ntarget::Real=0: The target eigenvalue around which to focus the computation. This is used to prioritize finding eigenvalues closest to this value. Defaults to 0.\nmethod::String: The method to be used for calculating eigenvalues of a sparse matrix.\n\nReturns:\n\neigenvalues::Vector{Float64}: A vector of the real parts of the computed eigenvalues, focusing on those closest to the target. The number of eigenvalues returned is equal to Neig.\neigenvectors::Matrix{ComplexF64}: A matrix where each column is an eigenvector corresponding to one of the computed eigenvalues.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.diagonalize-Tuple{Vector{<:AbstractMatrix}}","page":"Library","title":"Hamster.diagonalize","text":"diagonalize(Hk::Vector{<:AbstractMatrix}; Neig=size(Hk[1], 1), target=0, method=\"shift-invert\")\n\nDiagonalizes a vector of Hamiltonian matrices Hk and returns the specified number of eigenvalues and eigenvectors for each matrix.\n\nArguments:\n\nHk::Vector{<:AbstractMatrix}: A vector of Hamiltonian matrices to be diagonalized. Each matrix typically corresponds to a different momentum k in a band structure calculation.\nNeig::Int=size(Hk[1], 1): The number of eigenvalues and corresponding eigenvectors to compute for each Hamiltonian matrix. Defaults to the full diagonalization (size(Hk[1], 1)).\ntarget::Real=0: The target eigenvalue when computing eigenvalues of a sparse matrix.\nmethod::String: The method to be used for calculating eigenvalues of a sparse matrix.\n\nReturns:\n\nEs::Matrix{Float64}: A matrix where each column Es[:, k] contains the Neig eigenvalues of the k-th Hamiltonian matrix in Hk.\nvs::Array{ComplexF64, 3}: A 3D array where each vs[:, :, k] contains the Neig eigenvectors corresponding to the k-th Hamiltonian matrix in Hk. The dimensions of vs are (Nε, Neig, Nk), where Nε is the size of each Hamiltonian matrix, Neig is the number of eigenvectors, and Nk is the number of Hamiltonian matrices.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.exp_2πi-Tuple{Any, Any}","page":"Library","title":"Hamster.exp_2πi","text":"exp_2πi(k⃗, R⃗)\n\nCalculate the phase factor exp(2πik⃗⋅R⃗).\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_hamiltonian","page":"Library","title":"Hamster.get_hamiltonian","text":"get_hamiltonian(Hr::Vector{<:AbstractMatrix}, Rs, ks, mode=Dense(), weights=ones(size(Rs, 2)))\n\nConstructs a vector of Hamiltonian matrices by combining a vector of matrices Hr with phase factors determined by Rs and ks.\n\nArguments:\n\nHr::Vector{<:AbstractMatrix}: A vector of matrices where each matrix represents a component of the Hamiltonian. These matrices must be compatible in size for the operations performed.\nRs: A matrix or array containing positional information used to calculate phase factors.\nks: A matrix of momentum values used in conjunction with Rs to compute phase factors.\nmode::Dense(): Indicates whether to construct a sparse or dense Hamiltonian. Defaults to Dense.\nweights::Vector=ones(size(Rs, 2)): A vector of weights used in the summation of phase factors. The length of this vector should match the number of columns in Rs. These are the degeneracies for the Wannier90 Hamiltonians.\n\nReturns:\n\nA vector of Hamiltonian matrices Hk, where each matrix is constructed by combining Hr with phase factors and optionally transformed into a spin basis.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.get_sparsity-Tuple{AbstractArray}","page":"Library","title":"Hamster.get_sparsity","text":"get_sparsity(H::AbstractArray; sp_tol=1e-10)\n\nCalculates the sparsity of a matrix or array by determining the fraction of elements that are considered effectively zero based on a specified numerical tolerance.\n\nArguments:\n\nH::AbstractArray: The input matrix or array for which sparsity is to be calculated. It can be a dense or sparse matrix, or any array-like structure.\nsp_tol::Real=1e-10: The numerical tolerance used to determine whether an element is considered zero. Elements with both real and imaginary parts less than sp_tol in magnitude are considered zero.\n\nReturns:\n\nsparsity::Float64: The fraction of elements in H that are considered zero according to the specified tolerance. This value lies between 0.0 (no zero elements) and 1.0 (all elements are effectively zero).\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_sparsity-Tuple{Vector{<:AbstractArray}}","page":"Library","title":"Hamster.get_sparsity","text":"get_sparsity(H::Vector{AbstractArray}; sp_tol=1e-10)\n\nCalculates the sparsity of a vector of arrays by determining the fraction of elements across all arrays that are considered effectively zero based on a specified numerical tolerance.\n\nArguments:\n\nH::Vector{AbstractArray}: A vector containing arrays (e.g., matrices) for which sparsity is to be calculated. Each element of H should be an array of the same size.\nsp_tol::Real=1e-10: The numerical tolerance used to determine whether an element is considered zero. Elements with both real and imaginary parts less than sp_tol in magnitude are considered zero.\n\nReturns:\n\nsparsity::Float64: The fraction of elements across all arrays in H that are considered zero according to the specified tolerance. This value lies between 0.0 (no zero elements) and 1.0 (all elements are effectively zero).\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.gradient_apply_spin_basis-Tuple{AbstractMatrix}","page":"Library","title":"Hamster.gradient_apply_spin_basis","text":"gradient_apply_spin_basis(dHr::AbstractMatrix; alternating_order=false)\n\nCalculate the gradient of the spin basis applied to a given matrix dHr. The output matrix is of size (Nε/2, Nε/2).\n\nThis function reshapes the input matrix dHr, which is expected to represent a gradient in a spin system, into a form suitable for applying the spin basis transformation. The transformation is performed using the Kronecker product, and the output is computed depending on the specified order of application.\n\nArguments\n\ndHr::AbstractMatrix: An abstract matrix containing the gradient data to be transformed. It should have a shape that is compatible with the spin basis operations.\nalternating_order::Bool: A flag that determines the order of the spin basis application. If false, the function applies the transformation as kron(H, I_spin). If true, it applies the transformation as kron(I_spin, H).\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.reshape_and_sparsify_eigenvectors-Tuple{Any, Hamster.Dense}","page":"Library","title":"Hamster.reshape_and_sparsify_eigenvectors","text":"reshape_and_sparsify_eigenvectors(vs, mode::SparsityMode; sp_tol=1e-10) -> Matrix\n\nReshapes and optionally sparsifies a 3D array of eigenvectors vs into a 2D matrix of vectors,  depending on the specified SparsityMode. \n\nThe input vs is assumed to have dimensions (n, m, k), where:\n\nn represents the size of each eigenvector.\nm and k represent the number of eigenvector groups along two axes.\n\nArguments\n\nvs::Array: A 3D array of eigenvectors, where vs[:, m, k] corresponds to the eigenvector at position (m, k).\nmode::SparsityMode: Specifies the sparsity mode. Must be either:\nDense: Produces a dense matrix where each element is a dense vector.\nSparse: Produces a sparse matrix where each element is a sparse vector.\nsp_tol::Float64=1e-10: (Optional) The tolerance below which elements of the eigenvectors are dropped when  Sparse mode is selected. Defaults to 1e-10.\n\nReturns\n\nMatrix{Vector{ComplexF64}} if mode is Dense: A 2D matrix of dense vectors corresponding to eigenvectors in vs.\nMatrix{SparseVector{ComplexF64, Int64}} if mode is Sparse: A 2D matrix of sparse vectors, where elements smaller  than sp_tol are removed.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#SparseArrays.droptol!","page":"Library","title":"SparseArrays.droptol!","text":"droptol!(H::Vector{AbstractSparseMatrix}, tol=1e-10)\n\nApplies a tolerance to drop small elements from a vector of sparse matrices, modifying the matrices in place.\n\nArguments:\n\nH::Vector{AbstractSparseMatrix}: A vector of sparse matrices where small elements will be dropped. The matrices are modified in place.\ntol::Real=1e-8: The numerical tolerance used to determine which elements are considered too small and should be dropped. Elements with absolute values less than tol are removed from the sparse matrices.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.chain_rule-Tuple{Any, Any, Any}","page":"Library","title":"Hamster.chain_rule","text":"chain_rule(dL_dE, dE_dHr, mode)\n\nApplies the chain rule to compute the gradient of the loss with respect to the real-space Hamiltonian matrix elements by combining partial derivatives dL_dE and dE_dHr.\n\nArguments\n\ndL_dE: An array containing the partial derivatives of the loss with respect to the eigenvalues, with shape (m, k), where m is the eigenvalue index and k is the k-point index.\ndE_dHr: A 3D array of Matrices containing the partial derivatives of the eigenvalues with respect to the Hamiltonian in real-space coordinates, with shape (R, m, k), where R is the lattice vector index.\nmode: Specifies whether the Hamiltonian is sparse or dense, determining the data structure of the result.\n\nReturns\n\ndL_dHr: A real-space Hamiltonian gradient array, where each element contains the accumulated gradient for a specific lattice vector in R. Its shape is determined by the Hamiltonian structure and mode.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_eigenvalue_gradient","page":"Library","title":"Hamster.get_eigenvalue_gradient","text":"get_eigenvalue_gradient(vs, Rs, ks, sp_mode, sp_iterator; nthreads_bands, nthreads_kpoints)\n\nCompute the gradient dE_dHr of each energy eigenvalue at each k-point w.r.t. the real-space Hamiltonian matrix elements.\n\nArguments\n\n-vs: Matrix that contains the (sparse) eigenvectors of each eigenvalue (m, k).\n\nRs::Matrix{Int64}: Lattice translation vectors in units of the lattice vectors.\nks::Matrix{Float64}: The coordinates of each k-point in units of the reciprocal lattice vectors.\nsp_mode: Either Dense or Sparse, determines whether the gradients are sparsified.\nsp_iterator: Special iterator to optimize iteration over i, j, R for very sparse systems.\n\nReturns\n\ndE_dHr: An array of shape (NR, Nε, Nk) that contains (sparse) matrices of shape (Nε, Nε).\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.hellman_feynman!-Tuple{Any, Any, Any}","page":"Library","title":"Hamster.hellman_feynman!","text":"hellman_feynman!(dE_dλ, Ψ_i, dHk_ij)\n\nCompute the gradient of the eigenvalues using the Hellmann-Feynman theorem and store the results in dE_dλ.\n\nArguments\n\ndE_dλ::AbstractArray: Pre-allocated array to store the computed gradients (as Nε×Nε matrix), typically of size (NR, Nε, Nk). \nΨ_i::AbstractArray: Array of eigenvectors (wavefunctions), typically of size (Nε, Nk).\ndHk_ij::AbstractArray: Array representing the derivative of the Hamiltonian with respect some λ for each lattice vector and k-point. Its size is typically (NR, Nk).\n\nDetails\n\nFor each k-point k and eigenstate m, this function computes the matrix element of the form:\n\n⟨Ψ_i[m, k] | dHk_ij[R, k] | Ψ_i[m, k]⟩\n\nand stores the real part of this value in dE_dλ[R, m, k]. This is done for each lattice vector R, eigenstate m, and k-point k.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.read_ham","page":"Library","title":"Hamster.read_ham","text":"read_ham(comm, ind=0; filename=\"ham.h5\", space=\"k\")\n\nRead a Hamiltonian and associated vectors from an HDF5 file previously written with write_ham.\n\nArguments\n\ncomm::MPI.Comm: MPI communicator used to open the HDF5 file in parallel mode.\nind::Int=0: Optional index to identify which Hamiltonian group to read.\n\nKeyword Arguments\n\nfilename::AbstractString=\"ham.h5\": Name of the HDF5 file to read from.\nspace::AbstractString=\"k\": Label used in the Hamiltonian group name (e.g., \"Hk\" or \"Hk_1\").\n\nReturns\n\nH::Vector{SparseMatrixCSC}: Vector of Hamiltonian blocks reconstructed as sparse matrices.\nvecs::Array: The stored array of vectors associated with the Hamiltonian.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.read_hr","page":"Library","title":"Hamster.read_hr","text":"read_hr(filename=\"hamster_hr.dat\"; sp_mode=false, verbose=1)\n\nReads Hamiltonian data and corresponding lattice vectors from a file, reconstructing the Hamiltonian matrices and lattice vectors.\n\nArguments:\n\nfilename::String=\"hamster_hr.dat\": The name of the file containing the Hamiltonian data. The default file name is \"hamster_hr.dat\".\nsp_mode::Bool=false: If true, enables sparse matrix storage mode for the Hamiltonians. This is useful for large, sparse Hamiltonians to save memory.\nverbose::Int64: Sets the verbosity. verbose=0 deactivates print statements.\n\nReturns:\n\nHr: A vector of 2D arrays where each element Hr[R] is a Hamiltonian matrix corresponding to the lattice vector Rs[:, R]. Each Hr[R] is a 2D array of size (Nε, Nε), where Nε is the size of the Hamiltonian matrices.\nRs: A 2D array where each column is a lattice vector corresponding to the Hamiltonians in Hr. The array has dimensions (3, NR), representing the lattice vectors in 3D space.\n\nBehavior:\n\nThe function reads the Hamiltonian data from the specified file.\nThe first line of the file specifies the size of the Hamiltonian matrix (Nε).\nThe second line specifies the number of lattice vectors (NR).\nThe function reads the subsequent lines to extract the Hamiltonian elements and their corresponding lattice vectors.\nIf sp_mode is true, the Hamiltonians are stored in a sparse format. Otherwise, a dense format is used.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.write_ham","page":"Library","title":"Hamster.write_ham","text":"write_ham(H, vecs, comm, ind=0; filename=\"ham.h5\", space=\"k\")\n\nWrite a Hamiltonian, represented as a vector of sparse matrices, into an HDF5 file in a parallel MPI setting.\n\nArguments\n\nH::Vector{SparseMatrixCSC}: Vector of sparse matrices that form the Hamiltonian blocks.\nvecs::AbstractArray: Array of vectors with one vector per block (k or R vectors).\ncomm::MPI.Comm: MPI communicator used to open the HDF5 file in parallel mode.\nind::Int=0: Optional index label (e.g., for each atomic configuration).\n\nFile structure\n\nThe Hamiltonian is stored under a group named:\n\n\"H$space\" if ind == 0\n\"H${space}_$ind\" otherwise\n\nInside this group:\n\n\"vecs\": dataset containing the supplied vecs (k or R vectors).\nSubgroups \"1\", \"2\", …, one for each block in H, containing:\n\"rowval\", \"colptr\", \"nzval\": the CSC representation of the sparse matrix.\n\"m\", \"n\": matrix dimensions.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.write_hr-Tuple{Any, Any}","page":"Library","title":"Hamster.write_hr","text":"write_hr(Hr, Rs; filename=\"hamster_hr\", tol=1e-8, verbose=1)\n\nWrites Hamiltonian data Hr and corresponding lattice vectors Rs to a file.\n\nArguments:\n\nHr: A vector of matrices where each Hr[R] contains the Hamiltonian elements corresponding to the lattice vector Rs[:, R].\nRs: A 2D array where each column is a lattice vector corresponding to the Hamiltonian elements in Hr. The array has dimensions (3, NR), representing the lattice vectors in 3D space.\nfilename::String=\"hamster_hr\": The base name of the output file. The function appends .dat to this base name to create the final output file name.\ntol::Float64=1e-8: A tolerance threshold for determining whether a Hamiltonian element should be considered non-zero and written to the file. Elements with absolute values below this threshold are omitted from the output.\nverbose::Int64: Sets the verbosity. verbose=0 deactivates print statements.\n\nBehavior:\n\nThe function writes the Hamiltonian data to a file named filename.dat.\nThe first line of the file contains the size of the Hamiltonian matrix (Nε).\nThe second line contains the number of lattice vectors (NR).\nThe function writes only the non-zero elements of Hr (as determined by tol) to the file, along with their corresponding lattice vector indices and matrix indices.\nThe output file format aligns the numeric values to fixed-width columns for readability.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.TBModel","page":"Library","title":"Hamster.TBModel","text":"TBModel(strc::Structure, basis::Basis, conf=get_empty_config(); update_tb, initas)\n\nConstructs a TBModel for the given structure strc and basis basis, based on the configuration conf.\n\nArguments\n\nstrc::Structure: The structure of the material or system being modeled.\nbasis::Basis: The basis functions or orbitals used to describe the electronic states in the tight-binding model.\nconf: (Optional) A configuration object that contains various settings and parameters for building the model.\nupdate_tb: (Optional) A flag indicating whether the model's parameters should be updated during optimization. Defaults to get_update_tb(conf).\ninitas: (Optional) Initialization parameters for the model. Defaults to get_init_params(conf).\n\nReturns\n\nA TBModel object with the geometry tensor h and the model's parameters set via init_params!.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.TBModel-2","page":"Library","title":"Hamster.TBModel","text":"TBModel\n\nA mutable struct representing a tight-binding model.\n\nFields\n\nh::Matrix{SparseMatrixCSC{Float64, Int64}}: A matrix where each element is a sparse matrix representing the geometry tensor.\nparameter_labels::Vector: A vector containing the label for each parameter.\nV::Vector{Float64}: A vector containing the model's parameters.\nupdate::Bool: A boolean flag indicating whether the model's parameters V should be updated during optimization or kept fixed.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.get_hr","page":"Library","title":"Hamster.get_hr","text":"get_hr(h, V=model.V, mode=Val{:dense})\n\nConstruct the real-space Hamiltonian (Hr) by multiplying the geometry tensor h with the parameters V.\n\nArguments\n\nh: A 2D array of matrices where each element h[v, R] represents a Hamiltonian block associated with parameter v and lattice vector R.\nV: A vector of parameters.\nmode: Optional argument that specifies the format of the resulting Hamiltonian (Hr). Defaults to Val{:dense}, but can be other types such as sparse.\n\nReturns\n\nHr: The resulting real-space Hamiltonian matrix (or array of matrices), constructed by summing the weighted Hamiltonian blocks for each lattice vector R.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.get_model_gradient-Tuple{Any, Vector{<:AbstractMatrix}}","page":"Library","title":"Hamster.get_model_gradient","text":"get_model_gradient(model, dL_dHr)\n\nComputes the gradient of the model's parameters using the given derivative of the Hamiltonian dLdHr. If dLdHr is not a vector of matrices (i.e., it represents multiple structures),  the function assumes it contains gradients for multiple structures and returns the average gradient across these structures.\n\nArguments\n\nmodel: A model object containing the parameters V and the geometry tensor h.\ndL_dHr: A matrix or array representing the derivative of the loss w.r.t. real-space Hamiltonian matrix elements.\n\nReturns\n\nThe gradients for each parameter in model.V.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_model_gradient-Tuple{TBModel, Any, Any, Any}","page":"Library","title":"Hamster.get_model_gradient","text":"get_model_gradient(ham::EffectiveHamiltonian, indices, reg, dL_dHr)\n\nComputes the gradient of the loss w.r.t. the model parameters.\n\nArguments\n\nham::EffectiveHamiltonian: The effective Hamiltonian model.\nindices::AbstractVector: A set of structure indices.\nreg: A regularization term or parameter used in the gradient computation.\ndL_dHr: The derivative of the loss function with respect to the Hamiltonian.\n\nReturns\n\nAbstractVector: A collection of gradients, one for each model in the ham.models, computed using the provided indices, regularization term, and loss derivative.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_params-Tuple{TBModel}","page":"Library","title":"Hamster.get_params","text":"get_params(model::TBModel)\n\nRetrieve the parameters associated with a TBModel.\n\nArguments\n\nmodel::TBModel: The tight-binding model instance from which to extract parameters.\n\nReturns\n\nThe parameters stored in the V field of the given TBModel instance.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.init_params!","page":"Library","title":"Hamster.init_params!","text":"init_params!(model, basis, conf=get_empty_config(); initas=get_init_params(conf))\n\nInitialize the parameters of a model based on the provided configuration and initialization method.\n\nArguments\n\nmodel: The model whose parameter array V will be initialized.\nbasis: The Basis structure containing orbital and overlap information, as well as the parameters that will be initialized in the model.\nconf: Configuration settings that can be used to customize how parameters are initialized. By default, an empty configuration is used.\ninitas: Initialization method (e.g., ones, random or a file).\n\nKeyword Arguments\n\nconf: Configuration settings.\ninitas: The initialization method or file path for parameters. Defaults to ones.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.set_params!-Tuple{TBModel, Any}","page":"Library","title":"Hamster.set_params!","text":"set_params!(model::TBModel, V)\n\nSet the parameters of a TBModel instance while ensuring consistency with the model's structure.\n\nArguments\n\nmodel::TBModel: The tight-binding model whose parameters are to be updated.\nV: The new parameter vector to assign to the model's V field.\n\nError Conditions\n\nThrows an error if the parameter vector V is not of the correct size.\n\nReturns\n\nUpdates the V field of the model in place if the consistency checks pass.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.update!-Tuple{TBModel, Any, Any}","page":"Library","title":"Hamster.update!","text":"update!(model::TBModel, opt, dV)\n\nUpdates the parameters of the given TB model model using the provided optimizer opt and the gradient dV.\n\nArguments\n\nmodel: A TBModel object that contains the parameters to be updated.\nopt: An optimization algorithm or method used to update the model's parameters.\ndV: The gradient of the loss w.r.t. to the model parameters.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.write_params-3","page":"Library","title":"Hamster.write_params","text":"write_params(model::TBModel, conf=get_empty_config())\n\nWrites the parameters of a TBModel using its parameter labels and values.\n\nArguments\n\nmodel::TBModel: The tight-binding model whose parameters need to be written.\nconf: (Optional) Configuration settings, defaults to an empty configuration.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#SOC","page":"Library","title":"SOC","text":"","category":"section"},{"location":"library/library/#Hamster.Mtrans","page":"Library","title":"Hamster.Mtrans","text":"Mtrans: Dictionary mapping the type of orbital (\"s\", \"p\", \"d\") to its corresponding  transformation matrix (Ms, Mp, Md).\n\n\n\n\n\n","category":"constant"},{"location":"library/library/#Hamster.gen_permutation_matrix-Tuple{Vector{String}, Vector{String}}","page":"Library","title":"Hamster.gen_permutation_matrix","text":"gen_permutation_matrix(initial_order::Vector{String}, desired_order::Vector{String}) -> Array{Int, 2}\n\nGenerate a permutation matrix P that will reorder elements from initial_order to desired_order.\n\nArguments\n\ninitial_order: A vector of strings representing the initial order of elements.\ndesired_order: A vector of strings representing the desired order of elements.\n\nReturns\n\nThe permutation matrix P that reorders initial_order to desired_order.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_Msoc_d","page":"Library","title":"Hamster.get_Msoc_d","text":"get_Msoc_d(output_basis_order::Vector{String} = [\"dz2↑\", \"dxz↑\", \"dyz↑\", \"dx2-y2↑\", \"dxy↑\", \"dz2↓\", \"dxz↓\", \"dyz↓\", \"dx2-y2↓\", \"dxy↓\"]) -> Matrix{Complex{Float64}}\n\nConstruct the spin-orbit coupling matrix for d orbitals in the spatial basis. This function starts by generating the basis in the |lm,s> representation, calculates the spin-orbit coupling matrix in this basis, and then transforms it to the spatial basis. A permutation is applied to align with the specified output basis order, and numerical tolerance is used to set small values effectively to zero.\n\nArguments\n\noutput_basis_order: The order of orbitals and spins in the output matrix, provided as an array of strings.                       The default order is the one given in the thesis.\n\nReturns\n\nThe spin-orbit coupling matrix for d orbitals, ordered according to output_basis_order.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.get_Msoc_ho-Tuple{Any}","page":"Library","title":"Hamster.get_Msoc_ho","text":"get_Msoc_ho(axes; mode=\"sp3dr2\") -> BlockDiagonal\n\nCalculate the spin-orbit coupling (SOC) matrix for a given atomic axes and hybridization mode.\n\nArguments\n\naxes::Matrix{Float64}: The orientation axes of the current atom.\nmode::String: The hybridization mode, either \"sp3\" or \"sp3dr2\" (default: \"sp3dr2\").\n\nReturns\n\nBlockDiagonal: The SOC matrix in the hybridized basis.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_Msoc_p","page":"Library","title":"Hamster.get_Msoc_p","text":"get_Msoc_p(output_basis_order::Vector{String} = [\"pz↑\", \"px↑\", \"py↑\", \"pz↓\", \"px↓\", \"py↓\"]) -> Matrix{Complex{Float64}}\n\nCalculate the spin-orbit coupling matrix for p orbitals. The function constructs the matrix in the |lm,s> basis, transforms it to the spatial basis for p orbitals, applies a permutation to match the specified output basis order, and then applies numerical tolerance to trim small values.\n\nArguments\n\noutput_basis_order: A vector of strings that defines the order of the orbital and spin basis in the output matrix.                       The default order is the one given in the thesis.\n\nReturns\n\nA matrix representing the spin-orbit coupling in the spatial basis with the specified output order.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.get_Msoc_s","page":"Library","title":"Hamster.get_Msoc_s","text":"get_Msoc_s() -> zeros(Complex{Float64}, 2, 2)\n\nCalculate the spin-orbit coupling matrix for the s orbitals / a zero matrix.\n\nReturns\n\nThe spin-orbit coupling matrix Msoc_s for s orbitals.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.get_hybrid_coefficient_matrix-Tuple{Any}","page":"Library","title":"Hamster.get_hybrid_coefficient_matrix","text":"get_hybrid_coefficient_matrix(axes; mode=\"sp3dr2\") -> Matrix{ComplexF64}\n\nCalculate the hybrid coefficient matrix for given axes and mode.\n\nArguments\n\naxes::Matrix{Float64}: The axes for the atom.\nmode::String: The hybridization mode, either \"sp3\" or \"sp3dr2\" (default: \"sp3dr2\").\n\nReturns\n\nMatrix{ComplexF64}: The hybrid coefficient matrix.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_soc_matrices","page":"Library","title":"Hamster.get_soc_matrices","text":"get_soc_matrices(strc::Structure) -> Vector{BlockDiagonal}\n\nPrecompute the spin-orbit coupling (SOC) matrices for a given structure.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.get_sp3_expansion_coefficients-Tuple{Any, Any}","page":"Library","title":"Hamster.get_sp3_expansion_coefficients","text":"get_sp3_expansion_coefficients(θ, φ; Nspd=[1, 3, 0]) -> Vector{Float64}\n\nCalculate the sp3 expansion coefficients for given angles θ and φ.\n\nArguments\n\nθ::Float64: Polar angle.\nφ::Float64: Azimuthal angle.\nNspd::Vector{Int}: Relative proportions of s, p, and d orbitals (default: [1, 3, 0]).\n\nReturns\n\nVector{Float64}: The expansion coefficients in the order: s, px, py, pz.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.trans_lm_spatial-Union{Tuple{T}, Tuple{String, Matrix{T}}} where T","page":"Library","title":"Hamster.trans_lm_spatial","text":"trans_lm_spatial(orb::String, Msoc::Array{T, 2}) where T -> Array{T, 2}\n\nTransform the spin-orbit coupling matrix Msoc from the spin basis to the spatial basis for the given orbital type orb.\n\nArguments\n\norb: Orbital type as a string (\"s\", \"p\", or \"d\").\nMsoc: Matrix representing the spin-orbit coupling in the spin basis.\n\nReturns\n\nThe transformed spin-orbit coupling matrix in the spatial basis.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.SOCModel","page":"Library","title":"Hamster.SOCModel","text":"mutable struct SOCModel{M}\n\nA mutable struct representing a model for Spin-Orbit Coupling (SOC) effects.\n\nFields:\n\nparams::Vector{Float64}: A vector of model parameters.\nunique_ion_types::Vector{String}: A vector of unique ion types involved in the system, represented as strings.\nall_type_types::Vector{String}: A vector containing all ion types, possibly with repetitions, represented as strings.\nmatrices::Vector{M}: A vector of matrices that describe the SOC interactions for the given orbital basis.\nRs::Matrix{Float64}: A matrix that contains the lattice translation vectors.\nupdate::Bool: A boolean flag indicating whether the model is set to update its parameters or not.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.get_hr-Tuple{SOCModel, Any, Any}","page":"Library","title":"Hamster.get_hr","text":"get_hr(soc_model::SOCModel, sp_mode, index; apply_soc=true) -> BlockDiagonal\n\nConstructs the Hamiltonian representation for a given spin-orbit coupling (SOC) model.\n\nArguments\n\nsoc_model::SOCModel: The spin-orbit coupling model containing ion types, parameters, and matrices.\nsp_mode: Unused parameter (possibly reserved for future functionality).\nindex: The index of the ion type for parameter retrieval.\napply_soc::Bool (default: true): If true, applies SOC-related modifications (not explicitly used in this function).\n\nReturns\n\nA BlockDiagonal matrix where each block corresponds to an ion type, with parameters expanded and applied to SOC matrices.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_model_gradient-Tuple{SOCModel, Any, Any, Any}","page":"Library","title":"Hamster.get_model_gradient","text":"get_model_gradient(soc_model::SOCModel, indices, reg, dL_dHr)\n\nComputes the gradient of loss w.r.t. the SOC model's parameters.\n\nArguments:\n\nsoc_model::SOCModel: The SOC model.\nindices: The structure indices (not used here).\nreg: A regularization term that penalizes certain parameter values to avoid overfitting or enforce specific behavior.\ndL_dHr: Gradient of the loss w.r.t. the Hamiltonian matrix elements.\n\nReturns:\n\ndparams: A vector containing the gradient of the loss w.r.t. the model parameters.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_params-Tuple{SOCModel}","page":"Library","title":"Hamster.get_params","text":"get_params(soc_model::SOCModel) -> Vector\n\nRetrieves the parameters of a given spin-orbit coupling (SOC) model.\n\nArguments\n\nsoc_model::SOCModel: The SOC model containing the parameter set.\n\nReturns\n\nA vector of parameters associated with the SOC model.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.init_soc_params","page":"Library","title":"Hamster.init_soc_params","text":"init_soc_params(ions, conf=get_empty_config(); initas=get_soc_init_params(conf)) -> Vector{Float64}\n\nInitializes spin-orbit coupling (SOC) parameters for a given set of ions based on the specified initialization method.\n\nArguments\n\nions: A collection of ion objects.\nconf: (Optional) Configuration object used for consistency checks. Defaults to get_empty_config().\ninitas: (Optional) Specifies the initialization method:\n'z': Initializes all parameters to zero.\n'o': Initializes all parameters to one.\n'r': Initializes parameters with random values.\nFile path or identifier: Reads SOC parameters from an external source.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.set_params!-Tuple{SOCModel, Any}","page":"Library","title":"Hamster.set_params!","text":"set_params!(soc_model::SOCModel, params) -> Nothing\n\nUpdates the parameters of a spin-orbit coupling (SOC) model.\n\nArguments\n\nsoc_model::SOCModel: The SOC model whose parameters will be updated.\nparams: A vector of new parameters to assign to the model.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.update!-Tuple{SOCModel, Any, Any}","page":"Library","title":"Hamster.update!","text":"update!(soc_model::SOCModel, opt, dparams) -> Nothing\n\nUpdates the parameters of a spin-orbit coupling (SOC) model using an optimization routine.\n\nArguments\n\nsoc_model::SOCModel: The SOC model whose parameters will be updated.\nopt: The optimizer or update rule to apply to the parameters.\ndparams: The parameter updates (e.g., gradients or step values).\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.write_params-4","page":"Library","title":"Hamster.write_params","text":"write_params(soc_model::SOCModel, conf=get_empty_config()) -> Nothing\n\nWrites the parameters of a spin-orbit coupling (SOC) model to a file.\n\nArguments\n\nsoc_model::SOCModel: The SOC model whose parameters will be written.\nconf: Configuration settings (default: an empty configuration from get_empty_config()).\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.convert_block_matrix_to_sparse-Tuple{BlockDiagonals.BlockDiagonal}","page":"Library","title":"Hamster.convert_block_matrix_to_sparse","text":"convert_block_matrix_to_sparse(M::BlockDiagonal; sp_tol=1e-10) -> SparseMatrixCSC\n\nConverts a BlockDiagonal matrix M to a SparseMatrixCSC by iterating through each block and collecting the nonzero entries (within a given tolerance).\n\nArguments\n\nM::BlockDiagonal: A block diagonal matrix, typically from BlockDiagonals.jl or similar libraries.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_lms_basis-Tuple{String}","page":"Library","title":"Hamster.get_lms_basis","text":"create_basis_lm(orb::String) -> Vector{Vector{Int64}}\n\nCreate the basis set in the |lm,s> representation for a given type of orbital specified by orb. This function asserts that orb is one of the strings \"s\", \"p\", or \"d\", which correspond to  the different orbital types. It uses the num_mdict to fetch the corresponding m values and constructs a basis set with l, m, and spin quantum numbers.\n\nArguments\n\norb: A string specifying the orbital type (\"s\", \"p\", or \"d\").\n\nReturns\n\nbasis: A vector of vectors, with each sub-vector containing the quantum numbers [l, m, spin].\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_matrix_lmbasis-Tuple{Vector{Vector{Int64}}}","page":"Library","title":"Hamster.get_matrix_lmbasis","text":"get_matrix_lmbasis(basis::Vector{Vector{Int}}) -> Matrix{Complex{Float64}}\n\nConstruct the spin-orbit coupling matrix in the |lm,s> basis. This matrix represents the dot product of the angular momentum operators with the spin operators.\n\nArguments\n\nbasis: A vector of basis sets, each represented by a vector of quantum numbers [l, m, spin].\n\nReturns\n\nA matrix of type Complex{Float64} representing the spin-orbit coupling in the given basis.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.mapLmSp-Tuple{Vector{Int64}}","page":"Library","title":"Hamster.mapLmSp","text":"mapLmSp(lms::Vector{Int}) -> Tuple{Float64, Vector{Int}}\n\nMap the |lm,s> state to another state with the momentum and spin ladder operator L-S+. The function calculates the coefficient for the operation and the resulting state.\n\nArguments\n\nlms: A vector of quantum numbers [l, m, s].\n\nReturns\n\nA tuple of the coefficient of the operation and the new quantum numbers [l, m-1, s+2].\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.mapLpSm-Tuple{Vector{Int64}}","page":"Library","title":"Hamster.mapLpSm","text":"mapLpSm(lms::Vector{Int}) -> Tuple{Float64, Vector{Int}}\n\nMap the |lm,s> state to another state with the momentum and spin ladder operator L+S-. The function calculates the coefficient for the operation and the resulting state.\n\nArguments\n\nlms: A vector of quantum numbers [l, m, s].\n\nReturns\n\nA tuple of the coefficient of the operation and the new quantum numbers [l, m+1, s-2].\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.mapLzSz-Tuple{Vector{Int64}}","page":"Library","title":"Hamster.mapLzSz","text":"mapLzSz(lms::Vector{Int}) -> Tuple{Int, Vector{Int}}\n\nMap the |lm,s> state to itself while calculating the coefficient for the LzSz operation.\n\nArguments\n\nlms: A vector of quantum numbers [l, m, s].\n\nReturns\n\nA tuple of the coefficient m for s=1 or -m for s=-1, and the unchanged quantum numbers [l, m, s].\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.separate_spin_secs-Tuple{Any}","page":"Library","title":"Hamster.separate_spin_secs","text":"separate_spin_secs(orb_order::Vector{String}) -> Vector{String}\n\nReorder the basis by separating the spin components. This function does not alter  the order of spatial dimensions (e.g., s, py, sp3₁), but sorts the spin sector such  that all up-spin (↑) components appear before all down-spin (↓) components.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.thresholding","page":"Library","title":"Hamster.thresholding","text":"thresholding(c::Complex, real_threshold::Real=1e-15) -> Complex\n\nApply thresholding to a complex number, setting real and imaginary parts below the threshold to zero.\n\nArguments\n\nc::Complex: The complex number to threshold.\nreal_threshold::Real: The threshold value for the real and imaginary parts (default: 1e-15).\n\nReturns\n\nComplex: The thresholded complex number.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#ML","page":"Library","title":"ML","text":"","category":"section"},{"location":"library/library/#Hamster.decide_orbswap-NTuple{6, Any}","page":"Library","title":"Hamster.decide_orbswap","text":"decide_orbswap(itype, jtype, l_i, m_i, l_j, m_j) -> Bool\n\nDetermines whether two orbitals should be swapped to enforce a consistent ordering, based on their associated ion types and quantum numbers. The ordering is determined by:\n\nComparing element types using a periodic table-based numerical ordering (element_to_number).\nIf element types are the same, comparing orbital angular momentum quantum numbers (l_i, l_j).\nIf l values are equal, comparing magnetic quantum numbers (m_i, m_j).\n\nThis helps maintain consistent descriptor or feature vector construction in systems involving atomic orbitals.\n\nArguments\n\nitype: Symbol or string representing the first ion type (e.g., :H, \"O\").\njtype: Symbol or string representing the second ion type.\nl_i: Orbital angular momentum quantum number of the first orbital.\nm_i: Magnetic quantum number of the first orbital.\nl_j: Orbital angular momentum quantum number of the second orbital.\nm_j: Magnetic quantum number of the second orbital.\n\nReturns\n\ntrue if the orbitals should be swapped to maintain ordering; false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.farthest_point_sampling-Tuple{Any, Any, Any}","page":"Library","title":"Hamster.farthest_point_sampling","text":"farthest_point_sampling(descriptors, cluster_indices, num_to_take)\n\nSelects num_to_take diverse points from a subset of data specified by cluster_indices using greedy farthest-point sampling based on Euclidean distance.\n\nArguments\n\ndescriptors::AbstractMatrix{<:Real}: A matrix of feature vectors where each column corresponds to a data point.\ncluster_indices::Vector{Int}: Indices of the points in descriptors that belong to the cluster to sample from.\nnum_to_take::Int: Number of points to select.\n\nReturns\n\nselected::Vector{Int}: Indices of the selected points (subset of cluster_indices) representing a diverse subset.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_angular_descriptors-NTuple{4, Any}","page":"Library","title":"Hamster.get_angular_descriptors","text":"get_angular_descriptors(itype, jtype, ri, rj, iaxis, jaxis, orbswap)\n\nComputes angular descriptors based on the relative positions and orbital orientations of two atoms.\n\nArguments\n\nitype, jtype: Atomic types of the two atoms.\nri, rj: Position vectors of the two atoms.\niaxis, jaxis: Axes defining the local orbital orientation for each atom.\n\nReturns\n\nφ::Float64: The angle between the two orbital axes.\nθs::Vector{Float64}: A sorted or conditionally reversed list of angles between each axis and the bond direction.\n\nBehavior\n\nComputes the normalized bond direction Δrij and Δrji depending on the distance between the atoms.\nDetermines the angle φ between the two orbital axes.\nComputes θs, the angles between each axis (iaxis, jaxis) and the respective bond directions.\nEnsures consistent ordering of θs based on atomic types and orbital swapping rules.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_environmental_descriptor-Tuple{Any, Any, Any, Any, Config}","page":"Library","title":"Hamster.get_environmental_descriptor","text":"get_environmental_descriptor(h, V, strc, basis, conf::Config; apply_params=false, rcut=get_ml_rcut(conf))\n\nComputes the environmental descriptor for a given structure, basis, and configuration object.\n\nArguments\n\nh: The geometry tensor for the given structure.\nV: A vector of interaction parameters.\nstrc: The structure containing lattice and atomic positions.\nbasis: The basis set defining the system's orbitals.\nconf::Config: Configuration object.\n\nKeyword Arguments\n\napply_params: If true, uses V as given; otherwise, is set to ones.\nrcut: Cut-off radius for interactions, defaults to get_ml_rcut(conf).\n\nReturns\n\nenv: A vector representing the environmental descriptor.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_tb_descriptor-Tuple{Any, Any, Structure, Any, Config}","page":"Library","title":"Hamster.get_tb_descriptor","text":"get_tb_descriptor(model, strc, conf)\n\nCalculate the TB descriptor for a given a TB model, a structure strc and a TBConfig file conf.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.reshape_structure_descriptors-Tuple{Any}","page":"Library","title":"Hamster.reshape_structure_descriptors","text":"reshape_structure_descriptors(descriptors) -> Matrix{Float64}\n\nReshapes a nested structure of sparse descriptors into a dense matrix (to be used as input for kmeans).\n\nArguments\n\ndescriptors: A nested collection of sparse matrices representing structure descriptors.\n\nReturns\n\nA matrix (Matrix{Float64}) where each column corresponds to a flattened descriptor.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.sample_structure_descriptors-Tuple{Any}","page":"Library","title":"Hamster.sample_structure_descriptors","text":"sample_structure_descriptors(descriptors; Ncluster=1, Npoints=1, alpha=0.5, ml_sampling=\"random\")\n\nSelects a subset of descriptor vectors using K-Means clustering, weighted by cluster size and spread.\n\nArguments\n\ndescriptors: A matrix where each column represents a descriptor vector.\nNcluster::Int=1: The number of clusters for K-Means.\nNpoints::Int=1: The total number of descriptor vectors to select.\nalpha::Float64=0.5: A weighting factor (0 ≤ α ≤ 1) that balances selection between cluster size (α → 1) and spread (α → 0).\nml_sampling::String: Determines how points are selected from each cluster. Defaults to random.\n\nReturns\n\nA matrix of selected descriptor vectors with Npoints columns.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.HamiltonianKernel","page":"Library","title":"Hamster.HamiltonianKernel","text":"HamiltonianKernel(strcs, bases, model, conf)\n\nConstructor for a HamiltonianKernel model.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.HamiltonianKernel-2","page":"Library","title":"Hamster.HamiltonianKernel","text":"mutable struct HamiltonianKernel{T1, T2}\n\nA kernel structure used for computing weighted similarity functions.\n\nFields\n\nws :: Vector{Float64}: Weights for each sample point.\nxs :: Vector{T1}: Sample points.\nsim_params :: T2: Parameters for the similarity function.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.get_hr-Tuple{HamiltonianKernel, Hamster.Dense, Any}","page":"Library","title":"Hamster.get_hr","text":"get_hr(kernel::HamiltonianKernel, mode, index; apply_soc=false) -> Vector{Matrix{Float64}}\n\nConstructs a set of real-space Hamiltonians from a HamiltonianKernel.\n\nArguments\n\nkernel::HamiltonianKernel: The Hamiltonian kernel used for computing matrix elements.\nmode: Specifies the sparsity mode.\nindex: Index specifying which structure to evaluate.\n\nKeyword Arguments\n\napply_soc: If true, applies the spin-orbit coupling (SOC) basis transformation.\n\nReturns\n\nA vector of real-space Hamiltonian matrices, optionally modified with SOC transformations.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_model_gradient-Tuple{HamiltonianKernel, Any, Any, Any}","page":"Library","title":"Hamster.get_model_gradient","text":"get_model_gradient(kernel::HamiltonianKernel, indices, reg, dL_dHr) -> Vector{Float64}\n\nComputes the gradient of the model parameters for a given HamiltonianKernel.\n\nArguments\n\nkernel::HamiltonianKernel: The Hamiltonian kernel for which the gradient is computed.\nindices: Indices specifying which structure descriptors to use.\nreg: Regularization term.\ndL_dHr: Gradient of the loss function with respect to the real-space Hamiltonian.\n\nReturns\n\ndparams: A vector containing the computed gradients of the model parameters.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_params-Tuple{HamiltonianKernel}","page":"Library","title":"Hamster.get_params","text":"get_params(kernel::HamiltonianKernel)\n\nRetrieve the parameters associated with a HamiltonianKernel.\n\nArguments\n\nkernel::HamiltonianKernel: The Hamiltonian kernel instance from which to extract parameters.\n\nReturns\n\nThe parameters stored in the ws field of the given HamiltonianKernel instance.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.init_ml_params!","page":"Library","title":"Hamster.init_ml_params!","text":"init_ml_params!(data_points, conf=get_empty_config(); initas=get_ml_init_params(conf))\n\nInitializes machine learning parameters based on a given initialization strategy and updates the data_points.\n\nArguments\n\ndata_points: The data points associated with the machine learning parameters.\nconf: A configuration object (default: get_empty_config()) containing simulation parameters and settings.\ninitas: A string (default: get_ml_init_params(conf)) that specifies the initialization strategy. Possible values:\n'z': Initialize parameters to zeros.\n'o': Initialize parameters to ones.\n'r': Initialize parameters with random values.\nfile: Initialize parameters from a file initas\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.read_ml_params","page":"Library","title":"Hamster.read_ml_params","text":"read_ml_params(conf=get_empty_config(); filename=get_ml_filename(conf))\n\nReads the parameters for a HamiltonianKernel model from a file and returns the parameters and associated data points.\n\nArguments\n\nconf: A configuration object (default: get_empty_config()) containing simulation parameters and settings.\nfilename: The name of the .dat file to read from (default: get_ml_filename(conf)).\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.set_params!-Tuple{HamiltonianKernel, Any}","page":"Library","title":"Hamster.set_params!","text":"set_params!(kernel::HamiltonianKernel, ws)\n\nSet the parameters of a HamiltonianKernel instance.\n\nArguments\n\nkernel::HamiltonianKernel: The kernel model whose parameters are to be updated.\nws: The new parameter vector.\n\nError Conditions\n\nThrows an error if the parameter vector ws is not of the correct size.\n\nReturns\n\nUpdates the Vs field of the kernel in place if the consistency checks pass.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.update!-Tuple{HamiltonianKernel, Any, Any}","page":"Library","title":"Hamster.update!","text":"update!(kernel::HamiltonianKernel, opt, grad)\n\nUpdates the parameters of a HamiltonianKernel using an optimization method opt.\n\nArguments\n\nkernel::HamiltonianKernel: The Hamiltonian kernel whose parameters are to be updated.\nopt: The optimizer used to perform the update.\ngrad: The gradient used for updating the parameters.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.write_params-5","page":"Library","title":"Hamster.write_params","text":"write_params(kernel::HamiltonianKernel, conf=get_empty_config(); filename=get_ml_filename(conf))\n\nWrites the parameters and configuration settings of a HamiltonianKernel object to a file.\n\nArguments\n\nkernel::HamiltonianKernel: The HamiltonianKernel object containing the parameters and data points to write to the file.\nconf: A configuration object (default: get_empty_config()) containing simulation parameters and settings.\nfilename: The name of the file to which the data will be written (default: get_ml_filename(conf)).\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Optimization","page":"Library","title":"Optimization","text":"","category":"section"},{"location":"library/library/#Hamster.Adam","page":"Library","title":"Hamster.Adam","text":"Adam(η = 0.001, β::Tuple = (0.9, 0.999), ϵ = 1.0e-8)\n\nAdam optimiser.\n\nParameters\n\nLearning rate (η): Amount by which gradients are discounted before updating                      the weights.\nDecay of momentums (β::Tuple): Exponential decay for the first (β1) and the                                  second (β2) momentum estimate.\n\nExamples\n\nopt = Adam()\nopt = Adam(0.001, (0.9, 0.8))\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.DataLoader","page":"Library","title":"Hamster.DataLoader","text":"DataLoader{A, B}\n\nA struct to store and manage training and validation datasets.\n\nFields\n\ntrain_data::Vector{A}: A vector containing the training dataset. The type A represents the data type of the training set.\nval_data::Vector{B}: A vector containing the validation dataset. The type B represents the data type of the validation set.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.EigData","page":"Library","title":"Hamster.EigData","text":"EigData\n\nA struct for storing eigenvalue data associated with k-points.\n\nFields\n\nkp::Matrix{Float64}: A matrix where each column represents a k-point. \nEs::Matrix{Float64}: A matrix where each column represents the eigenvalues corresponding to the respective k-point.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.HrData","page":"Library","title":"Hamster.HrData","text":"HrData{M}\n\nA struct for storing Hamiltonian data Hr and the associated lattice translation vectors Rs for a system, typically from Wannier90.\n\nFields\n\nRs::Matrix{Float64}: A matrix where each column represents a lattice translation vector.\nHr::Vector{M}: A vector of Hamiltonian matrices Hr, where each entry corresponds to a lattice translation vector in Rs. Each element in this vector is a Hamiltonian matrix, with M representing the matrix type (e.g., dense or sparse).\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.get_neig_and_nk-Tuple{Vector{Hamster.EigData}}","page":"Library","title":"Hamster.get_neig_and_nk","text":"get_neig_and_nk(data::Vector)\n\nGet the number of eigenvalues and the number of k-points from a collection of data.\n\nArguments\n\ndata: A vector of either EigData or HrData.\n\nReturns\n\n(Neig, Nk): The number of eigenvalues and k-points of the first data point. Return 0 for HrData.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_translation_vectors_for_hr_fit","page":"Library","title":"Hamster.get_translation_vectors_for_hr_fit","text":"get_translation_vectors_for_hr_fit(conf=get_empty_config(); hr_fit=get_hr_fit(conf), train_data=get_train_data(conf))::Matrix{Float64}\n\nIf fitting the model to Hr data, read the respective translation vectors from the train_data file.\n\nArguments\n\nconf (default: get_empty_config()): A Config instance.\nhr_fit: If true, model is fit to Hr data.\ntrain_data: Path to the training data file.\n\nReturns\n\nRs::Matrix{Float64}: The translation vectors, if not hr_fit, return zeros (Rs are calculated depending on rcut).\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.GDOptimizer","page":"Library","title":"Hamster.GDOptimizer","text":"GDOptimizer(Nε, Nk, conf=get_empty_config(); lr=get_lr(conf), Niter=get_niter(conf))\n\nCreates a gradient descent optimizer for a given loss function, regularization term, and optimizer configuration.\n\nArguments\n\nNε::Int (optional): Parameter representing the number of energy levels. If Nε == 0, a default configuration is used.\nNk::Int (optional): Parameter representing the number of k-points. If Nk == 0, a default configuration is used.\nconf::Any: Configuration object for the optimizer, defaults to get_empty_config().\nlr::Float64 (optional): Learning rate for the Adam optimizer. Defaults to the value returned by get_lr(conf).\nNiter::Int (optional): Number of iterations for the optimization process. Defaults to the value returned by get_niter(conf).\nval_weights::Bool (optional): If true, same weights are used for validation as for training.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.GDOptimizer-2","page":"Library","title":"Hamster.GDOptimizer","text":"GDOptimizer\n\nA gradient descent optimizer for training Hamiltonian models, incorporating loss functions, regularization, and an Adam optimizer for parameter updates.\n\nFields\n\nloss::Loss: The loss function used for training. Determines how the model's error is measured and minimized during training.\nval_loss::Loss: The loss function used for validation. Evaluates the model's performance on unseen data.\nreg::Regularization: Regularization strategy applied during training to prevent overfitting.\nadam::Adam: The Adam optimizer instance used for updating model parameters with gradient-based methods.\nNiter::Int64: The number of training iterations.\n\nUsage\n\nThis structure encapsulates all components required for optimizing a Hamiltonian model. It is typically passed to training functions, such as train_step! or optimize_model!, to guide the optimization process.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Loss","page":"Library","title":"Hamster.Loss","text":"Loss(Nε, Nk; conf=get_empty_config(), loss=get_loss(conf), wE=get_band_weights(conf, Nε), wk=get_kpoint_weights(conf, Nk))\n\nCreate a Loss object with band weights, k-point weights, and loss norm based on a given configuration.\n\nArguments\n\nNε::Int64: Number of energy bands (dimension of wE).\nNk::Int64: Number of k-points (dimension of wk).\nconf: Configuration object (default: get_empty_config()). This is used to retrieve parameters for customizing the loss function.\nloss: A string that specifies the type of loss function. The default value is obtained from get_loss(conf).\nwE: Vector of weights for the energy bands, defaulted to get_band_weights(conf, Nε).\nwk: Vector of weights for the k-points, defaulted to get_kpoint_weights(conf, Nk).\n\nKeyword Arguments\n\nwE: The band weights, used to scale the errors over energy bands (default provided by configuration).\nwk: The k-point weights, used to scale the errors over k-points (default provided by configuration).\n\nReturns\n\nA Loss object initialized with the appropriate band weights (wE), k-point weights (wk), normalization factor, and loss norm (n).\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Loss-2","page":"Library","title":"Hamster.Loss","text":"struct Loss\n\nA structure representing a (weighted) loss function for evaluating the difference between predicted and true values. The loss is calculated based on a given norm, with optional weights applied to the errors along the prediction and observation dimensions.\n\nFields\n\nwE::Vector{Float64}: A vector of weights applied to the error terms along the y dimension (true values).\nwk::Vector{Float64}: A vector of weights applied to the error terms along the ŷ dimension (predicted values).\nN::Float64: Normalization factor, typically the product of the sums of wE and wk.\nn::Int64: The order of the norm used for the loss function (e.g., 1 for L1 norm, 2 for L2 norm, etc.).\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Regularization","page":"Library","title":"Hamster.Regularization","text":"Regularization([conf]; lambda=get_lambda(conf), barrier=get_barrier(conf), lreg=get_lreg(conf)) -> Regularization\n\nCreate a Regularization struct using configuration parameters from the provided configuration or default values.\n\nArguments\n\nconf: A configuration object (optional). Default values are used if not provided.\n\nReturns\n\nA Regularization struct initialized with the provided or default configuration values for barrier, lambda, and lreg.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Regularization-2","page":"Library","title":"Hamster.Regularization","text":"struct Regularization\n\nA data structure that defines the regularization parameters used to penalize model complexity during optimization. Regularization is used to penalize large model parameters to avoid overfitting.\n\nFields\n\nb::Float64: The barrier for the regularization term. Regularization is only applied if parameter values surpass this barrier.\nλ::Float64: The regularization coefficient (lambda), which controls the intensity of regularization. A higher value leads to stronger regularization.\nn::Int64: The norm type used for the regularization term, typically corresponding to L1 (n=1), L2 (n=2), or other norm types.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.backward-Tuple{Loss, Any, Any}","page":"Library","title":"Hamster.backward","text":"backward(l::Loss, y, ŷ)\n\nCompute the gradient of the loss function with respect to the predicted values ŷ.\n\nArguments\n\nl::Loss: A Loss object which specifies how the loss is calculated.\ny::AbstractVector: The predicted for each band and k-point.\nŷ::AbstractVector: The true values (ground truth) for each band and k-point.\n\nReturns\n\ndL::AbstractArray: The gradient of the loss with respect to the predicted values y.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.backward-Tuple{Regularization, Any}","page":"Library","title":"Hamster.backward","text":"backward(R::Regularization, x::AbstractVector) -> AbstractVector\n\nCompute the gradient of the regularization penalty with respect to the input (parameter) vector x.\n\nArguments\n\nR::Regularization: A Regularization object.\nx::AbstractVector: The input (parameter) vector for which the gradient of the regularization penalty is computed.\n\nReturns\n\nAbstractVector: A vector of the same size as x, where each element is the gradient of the penalty with respect to the corresponding element in x.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.forward-Tuple{Loss, Any, Any}","page":"Library","title":"Hamster.forward","text":"forward(l::Loss, y, ŷ)\n\nCompute the forward pass of the loss function given the true values y and the predicted values ŷ.\n\nArguments\n\nl::Loss: A Loss object which specifies how the loss is calculated.\ny::AbstractArray: The predicted for each band and k-point.\nŷ::AbstractArray: The true values (ground truth) for each band and k-point.\n\nReturns\n\n-L::Float64: The loss between y and ŷ.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.forward-Tuple{Regularization, Any}","page":"Library","title":"Hamster.forward","text":"forward(R::Regularization, x::AbstractVector) -> Float64\n\nCompute the regularization penalty for the given input x using the regularization parameters  defined in the Regularization struct.\n\nArguments\n\nR::Regularization: A Regularization object.\nx::AbstractVector: The input (parameter) vector over which the regularization penalty is applied.\n\nReturns\n\nFloat64: The total regularization penalty\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_weight_index_from_key-Tuple{Any}","page":"Library","title":"Hamster.get_weight_index_from_key","text":"get_weight_index_from_key(key::String) -> UnitRange{Int64}\n\nParses a weight key string and returns a range of indices.\n\nArguments\n\nkey::String: A string representing a weight index, either as a single value (e.g., \"key_1\") or as a range (e.g., \"key_1-3\").\n\nReturns\n\nA UnitRange{Int64} representing the parsed index or index range.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.backward","page":"Library","title":"Hamster.backward","text":"backward(ham::EffectiveHamiltonian, index, loss, data, cache)\n\nComputes the gradient of the loss for a given Hamiltonian model ham with respect to its matrix elements, based on the specified loss function loss and input data data.  The function behavior varies depending on the type of data, which can be either EigData or HrData.\n\nArguments\n\nham::EffectiveHamiltonian: The Hamiltonian model for which the gradient of the loss is being computed.\nindex: An index that specifies which Hamiltonian structure to use in the gradient computation.\nloss: A function that calculates the discrepancy between computed and ground truth values.\ndata: Either an EigData object containing k-point and ground truth eigenvalues, or an HrData object containing real-space Hamiltonian data.\ncache: A preliminary result from forward that is required to compute the gradient.\n\nReturns\n\ngradient: The computed gradient of the loss with respect to the parameters of ham.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.forward-Tuple{EffectiveHamiltonian, Any, Any, Hamster.EigData}","page":"Library","title":"Hamster.forward","text":"forward(ham::EffectiveHamiltonian, index, loss, data)\n\nComputes the loss for a given Hamiltonian model ham using a specified loss function loss and input data data. The behavior of the function depends on the type of data, which can be either EigData or HrData.\n\nArguments\n\nham::EffectiveHamiltonian: The Hamiltonian model from which effective Hamiltonians or real-space Hamiltonians are derived.\nindex: An index that specifies which structure to compute.\nloss: A function that calculates the discrepancy between computed and ground truth values.\ndata: Either an EigData object containing k-point and ground truth eigenvalues, or an HrData object containing real-space Hamiltonian data.\n\nReturns\n\nL_train::Float64: The calculated loss.\ncache: A preliminary result that is needed to compute the gradient.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.optimize_model!","page":"Library","title":"Hamster.optimize_model!","text":"optimize_model!(ham_train, ham_val, optim, dl, prof, conf=get_empty_config(); verbosity=get_verbosity(conf), Nbatch=get_nbatch(conf), validate=get_validate(conf), rank=0, nranks=1)\n\nOptimizes the model by performing training and optional validation steps.\n\nArguments\n\nham_train: The Hamiltonian model used for training.\nham_val: The Hamiltonian model used for validation (optional).\noptim: An optimization configuration, including the optimizer and its settings.\ndl: A data loader object containing the training data.\nprof: A profiler object used to store training and validation information.\ncomm: The MPI communicator.\nconf: A Config instance.\nverbosity: The level of verbosity for logging.\nNbatch: The number of batches per training iteration.\nvalidate: A flag indicating whether to perform validation during training.\n\nWorkflow\n\nPrint the start message.\nFor each training iteration, split the training data into batches and perform training steps.\nOptionally validate the model after each training iteration.\nPrint the final status once training is complete.\n\nReturns\n\nUpdates the HamsterProfiler prof and the model parameters in ham_train and ham_val.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.train_step!","page":"Library","title":"Hamster.train_step!","text":"train_step!(ham_train, indices, optim, train_data)\n\nPerforms a single training step on a Hamiltonian model by computing gradients and updating model parameters.\n\nArguments\n\nham_train: The Hamiltonian model being trained.\nindices: The indices of the structures to be evaluated.\noptim: A GDOptimizer instance.\ntrain_data: The training data.\nprof: A HamsterProfiler instance.\niter: The iteration index.\nbatch_id: The batch index.\ncomm: The MPI communicator.\nconf: A Config instance.\nrank: The active MPI rank.\nnranks: The total number of MPI ranks.\n\nSide Effects\n\nUpdates the model parameters in-place within ham_train.\nWrites timing information and training loss to prof.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.val_step!-NTuple{6, Any}","page":"Library","title":"Hamster.val_step!","text":"val_step!(ham_val, loss, val_data, prof, iter, comm, rank=0)\n\nEvaluates the validation loss for a Hamiltonian model over a given validation dataset, and stores the results in the HamsterProfiler instance. This function also tracks the time taken for validation.\n\nArguments\n\nham_val: The Hamiltonian model being validated.\nloss: The loss function used to evaluate the performance of the model.\nval_data: A collection of validation data.\nprof: An instance of the HamsterProfiler struct that tracks various profiling information, including validation times and losses.\niter: The current iteration number, used to store the validation results at the correct index in the prof instance.\n\nReturns\n\nL_val: The average validation loss computed over all validation structures. This value is also stored in prof.L_val at the index corresponding to iter.\nUpdates to prof.val_times: The elapsed time for the validation step is stored in prof.val_times[iter].\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.HamsterProfiler","page":"Library","title":"Hamster.HamsterProfiler","text":"HamsterProfiler(Ntimes, conf=get_empty_config(); Nbatch=get_nbatch(conf), Niter=get_niter(conf), printeachbatch=get_printeachbatch(conf), printeachiter=get_printeachiter(conf))\n\nA constructor function for initializing a HamsterProfiler instance.\n\nArguments\n\nNtimes::Int: The number of timing measurements to store for each batch and iteration.\nconf::Dict: A configuration dictionary (optional). Default is the result of get_empty_config().\nNbatch::Int: The number of batches (optional). Default is determined by the value of get_nbatch(conf).\nNiter::Int: The number of iterations (optional). Default is determined by the value of get_niter(conf).\nprinteachbatch::Bool: A flag to determine whether to print detailed status for each batch (optional). Default is determined by the value of get_printeachbatch(conf).\nprinteachiter::Int: Specifies the frequency of printing status updates (optional). Default is determined by the value of get_printeachiter(conf).\n\n-Nparams::Int: The number of parameters that are optimized.\n\nReturns\n\nAn instance of the HamsterProfiler struct.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.HamsterProfiler-2","page":"Library","title":"Hamster.HamsterProfiler","text":"HamsterProfiler\n\nA data structure for tracking and managing profiling information during an iterative process, including loss, timing, and verbosity settings.\n\nFields\n\nL_train::Matrix{Float64}: A 2D array where each row corresponds to training loss values for a specific batch across iterations.\nL_val::Vector{Float64}: A 1D array containing validation loss values across iterations.\nprinteachbatch::Bool: Indicates whether to print detailed status updates for each batch during training.\nprinteachiter::Int64: Specifies the frequency (in number of iterations) at which status updates are printed.\ntimings::Array{Float64, 3}: A 3D array storing timing information:\nFirst dimension: batches.\nSecond dimension: iterations.\nThird dimension: additional timing steps or phases within each iteration.\nval_times::Vector{Float64}: A 1D array containing validation timing information for each iteration.\nparam_values::Vector{Float64}: A 2D array where each column stores the parameter values for a given iteration.\n\nUsage\n\nThe HamsterProfiler struct is used in training workflows to:\n\nRecord and track training and validation loss values.\nMeasure and store timing data for profiling purposes.\nControl the verbosity and frequency of printed status updates.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.decide_printit-NTuple{5, Any}","page":"Library","title":"Hamster.decide_printit","text":"decide_printit(batch_id, Nbatch, iter, printeachbatch, printeachiter; verbosity=verbosity)\n\nDetermines whether to print status updates based on the current iteration, batch, and verbosity settings.\n\nArguments\n\nbatch_id::Int: The current batch identifier.\nNbatch::Int: The total number of batches.\niter::Int: The current iteration number.\nprinteachbatch::Bool: Whether to print at the end of each batch.\nprinteachiter::Int: Interval for printing during iterations if printeachbatch is false.\nverbosity::Int: (Keyword argument) The verbosity level. Printing is disabled if verbosity is less than 1.\n\nReturns\n\nBool: true if a status update should be printed, false otherwise.\n\nBehavior\n\nIf verbosity < 1, printing is disabled and the function returns false.\nIf printeachbatch is true, the function always returns true.\nOtherwise, printing occurs only if:\nThe current batch is the last batch (batch_id == Nbatch), and\nThe current iteration number (iter) is a multiple of printeachiter.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.print_final_status-Tuple{Any}","page":"Library","title":"Hamster.print_final_status","text":"print_final_status(prof)\n\nPrints the final loss, the total time elapsed, and a message indicating that the run has finished.\n\nArguments\n\nprof: A HamsterProfiler instance used to compute final_loss and total_time.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.print_iteration_status-NTuple{7, Any}","page":"Library","title":"Hamster.print_iteration_status","text":"print_iteration_status(iter, Niter, batch_id, Nbatch, L_train, time_iter, time_left)\n\nPrints the current status of an iterative process, including iteration number, batch details, loss, and timing information.\n\nArguments\n\niter::Int: The current iteration number.\nNiter::Int: The total number of iterations.\nbatch_id::Int: The current batch identifier (use 0 if not using batches).\nNbatch::Int: The total number of batches (use 0 if not using batches).\nL_train::Union{Float64, Int}: The current training loss value. Use 0 if loss is not being reported.\ntime_iter::Float64: Time elapsed for the current iteration, in seconds.\ntime_left::Float64: Estimated time remaining to complete the process, in seconds.\n\nBehavior\n\nThe function adapts its printed output based on the values of batch_id and L_train:\n\nNo batches and loss reported:\nPrints iteration number, total iterations, loss, iteration time, and estimated time left.\nNo batches, no loss reported:\nPrints iteration number, total iterations, iteration time, and estimated time left.\nWith batches and loss reported:\nPrints batch number, total batches, iteration number, total iterations, loss, iteration time, and estimated time left.\nWith batches, no loss reported:\nPrints batch number, total batches, iteration number, total iterations, iteration time, and estimated time left.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.print_start_message-Tuple{HamsterProfiler}","page":"Library","title":"Hamster.print_start_message","text":"print_start_message(prof)\n\nPrints a message indicating the start of a run, along with the total number of iterations.\n\nArguments\n\nprof: A HamsterProfiler instance.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.print_train_status-Tuple{Any, Any, Any}","page":"Library","title":"Hamster.print_train_status","text":"print_train_status(prof, iter, batch_id; verbosity=1)\n\nPrints the training status during an iterative training process, including loss, timing, and iteration progress.\n\nArguments\n\nprof: A profiling object containing training data, configuration, and timing information. Expected fields include:\nL_train: A 2D array where each row corresponds to batch loss values across iterations.\ntimings: A 3D array of timing data, where the first dimension corresponds to batch timing, the second to iteration, and the third to another dimension (e.g., steps or phases).\nprinteachbatch: A boolean indicating whether to print details for every batch.\nprinteachiter: A boolean indicating whether to print details for iterations only.\niter::Int: The current iteration number.\nbatch_id::Int: The current batch identifier (use 0 if not using batches).\nverbosity::Int (optional): Controls the level of detail in the output. Default is 1.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.print_val_start-Tuple{Any, Any}","page":"Library","title":"Hamster.print_val_start","text":"print_val_start(; verbosity=1)\n\nPrints a message indicating the start of the model validation process.\n\nArguments\n\nverbosity: (optional) An integer controlling the level of output. If verbosity > 0, the message \"Validating model...\" will be printed. Default is 1.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.print_val_status-Tuple{Any, Any}","page":"Library","title":"Hamster.print_val_status","text":"print_val_status(prof, iter; verbosity=1)\n\nPrints the validation loss and the time taken for validation at a specific iteration during the training process.\n\nArguments\n\nprof: A HamsterProfiler object that contains profiling information, including the validation loss (L_val) and validation times (val_times).\niter: The current iteration number in the training process.\nverbosity: (optional) An integer controlling the level of output. If verbosity > 0, the validation status will be printed. Default is 1.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Parsing-functions","page":"Library","title":"Parsing functions","text":"","category":"section"},{"location":"library/library/#Hamster.parse_commandline-Tuple{Any}","page":"Library","title":"Hamster.parse_commandline","text":"parse_commandline(args::Vector{String}) -> Dict{String, String}\n\nParses command-line arguments from a vector of strings args and returns a dictionary of parsed arguments.\n\nArguments\n\nargs: A vector of command-line arguments passed as strings.\n\nBehavior\n\nKeyword arguments (--option): If an argument starts with --, it is treated as a key with an associated value in the following position. If a comma is found at the end of an argument, the following arguments are concatenated until no comma is found.\nFlags (-o): If an argument starts with a single -, it is treated as a flag and is set to true (empty \"–\" arguments are also treated as flags).\nPositional arguments: stored with key pos_arg_i.\n\nReturns\n\nargs_dict: A dictionary containing parsed command-line arguments. Long options are stored as key-value pairs, flags are stored with a value of true.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.read_eigenval","page":"Library","title":"Hamster.read_eigenval","text":"read_eigenval(file::AbstractString, nmax::Int=1000000)\n\nRead the EIGENVAL VASP output file and extract the k-points, energy bands and occupancies.\n\nArguments\n\nfile::AbstractString: The path to the EIGENVAL file.\nnmax::Int=1000000: The maximum number of bands to read. Default is 1,000,000.\n\nReturns\n\nkpoints::Array{Float64, 2}: A 3 x nkpts array where each column represents a k-point.\nE_bands::Array{Float64, 2}: An nbands x nkpts array of energy bands.\noccs::Array{Float64, 2}: An nbrand × nkpts array of band occupancies.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.Poscar","page":"Library","title":"Hamster.Poscar","text":"struct Poscar\n\nA structure to represent the data contained in a VASP POSCAR file.\n\nFields\n\na::Float64: The scaling factor.\nlattice::Array{Float64, 2}: A 3x3 array representing the lattice vectors.\natom_names::Array{AbstractString, 1}: An array of atom names.\natom_numbers::Array{Int64, 1}: An array of the number of each type of atom.\nrs_atom::Array{Float64, 2}: A 3xNion array of atomic positions.\natom_types::Array{String, 1}: An array of atom types corresponding to each atom position.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.read_poscar-Tuple{Any}","page":"Library","title":"Hamster.read_poscar","text":"read_poscar(poscar::AbstractString) -> Poscar\n\nExtract all data from the POSCAR file at poscar.\n\nArguments\n\nposcar::AbstractString: The path to the POSCAR file.\n\nReturns\n\nPoscar: A Poscar struct containing all the extracted data from the POSCAR file, including:\na: The scaling factor.\nlattice: The 3x3 array of lattice vectors.\natom_names: An array of atom names.\natom_numbers: An array of the number of each type of atom.\nrs_atom: A 3xNion array of atomic positions.\natom_types: An array of atom types corresponding to each atom position.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.collapse_files_with-Tuple{Any}","page":"Library","title":"Hamster.collapse_files_with","text":"collapse_files_with!(str)\n\nSearches for all output files in the \"tmp\" directory that contain the substring str in their filename.   Reads and combines their data into a single large array, then writes the merged result to a new file named str*\".dat\".\n\nArguments\n\nstr::String: A substring to match filenames in the \"tmp\" directory.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.next_line_with-Tuple{AbstractArray, Any}","page":"Library","title":"Hamster.next_line_with","text":"next_line_with(keywords, lines)\n\nFind the next line in lines that contains a set of keywords.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.open_and_read-Tuple{Any}","page":"Library","title":"Hamster.open_and_read","text":"open_and_read(file::AbstractString) -> Vector{String}\n\nOpen a file, read all lines, and return them as a vector of strings.\n\nArguments\n\nfile::AbstractString: The path to the file to be read.\n\nReturns\n\nlines::Vector{String}: A vector where each element is a line from the file.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.parse_lines_as_array-Tuple{Any}","page":"Library","title":"Hamster.parse_lines_as_array","text":"parse_lines_as_array(lines; i1=1, i2=3, type=Float64)\n\nParses a list of strings into a 2D array, extracting and converting elements from each line based on specified indices and type.\n\nArguments\n\nlines: A list of strings, where each string is a line containing elements to be parsed.\ni1 (optional): The starting index for the elements to extract from each line. Defaults to 1.\ni2 (optional): The ending index for the elements to extract from each line. Defaults to 3.\ntype (optional): The type to which the extracted elements should be converted. Defaults to Float64.\n\nReturns\n\nA 2D array of the specified type, where each row corresponds to a line and each column corresponds to an extracted element from the line.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.print_hamster","page":"Library","title":"Hamster.print_hamster","text":"print_hamster(io_stream=stdout)\n\nPrints an ASCII art Hamster logo and description.\n\nArguments\n\nio_stream::IO: The output stream to which the text should be printed. Defaults to stdout.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.read_from_file-Tuple{Any}","page":"Library","title":"Hamster.read_from_file","text":"read_from_file(filename, type)\n\nRead an Array M with elements of type from the file with name filename.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.split_line-Tuple{Any}","page":"Library","title":"Hamster.split_line","text":"split_line(line::String) -> Vector{String}\n\nSplits a line of text into individual words, removing any extra spaces.\n\nArguments\n\nline::String: A string representing the line of text to be split.\n\nReturns\n\nVector{String}: An array of words from the input line, excluding any empty elements.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.split_lines-Tuple{Any}","page":"Library","title":"Hamster.split_lines","text":"split_lines(lines::Vector{String}) -> Vector{Vector{String}}\n\nSplit each line of the input vector of strings into its constituent non-empty elements.\n\nArguments\n\nlines::Vector{String}: A vector of strings, where each string represents a line to be split.\n\nReturns\n\nsplit_lines::Vector{Vector{String}}: A vector of vectors of strings, where each inner vector \n\ncontains the non-empty elements of the corresponding line from the input.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.write_to_file-Tuple{Any, Any}","page":"Library","title":"Hamster.write_to_file","text":"write_to_file(M, filename)\n\nWrite the Array M and shape to a new file with name filename.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.read_hrdat","page":"Library","title":"Hamster.read_hrdat","text":"read_hrdat(file::String)\n\nRead a Wannier90 hr.dat file and extract the Hamiltonian matrix elements, lattice vectors, and degeneracy values.\n\nArguments\n\nfile::String: The path to the hr.dat file.\n\nReturns\n\nA tuple containing:\nHᴿ::Array{ComplexF64, 3}: The Hamiltonian matrix elements, a 3D array with dimensions (numwann, numwann, NR).\nRs::Array{Float64, 2}: The lattice vectors, a 2D array with dimensions (3, NR).\ndeg::Vector{Int64}: The degeneracy values, a vector of length NR.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.read_xdatcar","page":"Library","title":"Hamster.read_xdatcar","text":"read_xdatcar(xdatcar::AbstractString) -> Xdatcar\n\nRead the configurations in the xdatcar file and store them in an Xdatcar object.\n\nArguments\n\nxdatcar::AbstractString: The path to the XDATCAR file.\nfrac::Bool=true: If false, coordinates are transformed to cartesian from fractional.\nverbosity::Int64=1: If greater 1, progress is printed.\n\nReturns\n\nlattice::Array{Float64, 3}: A 3x3 array representing the lattice vectors.\nconfigs::Array{Float64, 3}: A 3D array of shape (3, Nion, Nconfig), where each 3xNion slice represents the atomic positions in a configuration.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Main","page":"Library","title":"Main","text":"","category":"section"},{"location":"library/library/#Hamster.decide_which_task_to_perform-Tuple{Config}","page":"Library","title":"Hamster.decide_which_task_to_perform","text":"decide_which_task_to_perform(conf::Config)\n\nGiven a Config instance, decides which type of calculation is to be performed based on certain tags in the input file.\n\nDetails\n\nAn Optimizer without a HyperOpt block tells Hamster to run a parameter optimization.\nAn Optimizer with a HyperOpt block tells Hamster to run a hyperparameter optimization.\nOtherwise, a standard calculation is performed.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Config","page":"Library","title":"Config","text":"","category":"section"},{"location":"library/library/#Hamster.ConfigBlock","page":"Library","title":"Hamster.ConfigBlock","text":"ConfigBlock\n\nA structure representing a block of configuration settings.\n\nThe ConfigBlock struct is used to encapsulate a segment of a configuration file, typically consisting of a header and associated content lines. The header usually indicates the section or category of the configuration, while the content contains key-value pairs or other relevant settings.\n\nFields:\n\nheader::Vector{String}: A vector of strings representing the header of the configuration block. This typically identifies the section or category the block belongs to.\ncontent::Vector{String}: A vector of strings representing the content of the configuration block. Each string usually corresponds to a line in the configuration file, often containing key-value pairs or other settings.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.filter_comment-Tuple{Any}","page":"Library","title":"Hamster.filter_comment","text":"filter_comment(line::String)\n\nRemoves comments from a line of text based on predefined comment symbols. The function scans for comment symbols, and if found, it removes the comment portion and returns the remaining part of the line.\n\nArguments:\n\nline::String: The line of text from which comments need to be filtered out.\n\nReturns:\n\nA String that contains the line without comments. If the entire line is a comment or becomes empty after removing the comment, an empty string is returned.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_config-Tuple{}","page":"Library","title":"Hamster.get_config","text":"get_config(; filename=\"hconf\")\n\nRetrieves the configuration from a file if it exists, or returns an empty configuration if the file does not exist.\n\nArguments\n\nfilename (optional): The name of the configuration file to check for existence. Defaults to \"hconf\".\n\nReturns\n\nConfig: A Config instance.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.read_config-Tuple{String}","page":"Library","title":"Hamster.read_config","text":"read_config()\n\nRead the tbconfig file if given, else return default config.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.read_config_block!-Tuple{Hamster.ConfigBlock, Config}","page":"Library","title":"Hamster.read_config_block!","text":"read_config_block!(block::ConfigBlock, conf::Config)\n\nProcesses a configuration block and updates the configuration object with the parsed key-value pairs.\n\nThis function iterates over the lines in a ConfigBlock, parses each line to extract configuration options and their values, and updates the provided Config object. The function handles lines containing the = character, while ignoring comments and empty lines. The updates are made based on whether the block's header ends with \"Options\" or some other string.\n\nArguments:\n\nblock::ConfigBlock: An object representing a block of configuration lines, typically containing a header and a list of content lines.\nconf::Config: The configuration object that will be updated with the parsed key-value pairs from the block.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.read_config_line-Tuple{Any}","page":"Library","title":"Hamster.read_config_line","text":"read_config_line(line::String) -> Tuple{String, String}\n\nParses a configuration line into a key-value pair.\n\nThis function splits a configuration line at the first occurrence of the = character, separating the line into an option key and its corresponding value. Both the key and value are stripped of any leading or trailing whitespace.\n\nArguments:\n\nline::String: A string representing a single line from a configuration file, typically in the form \"key = value\".\n\nReturns:\n\nA tuple (option_key, option_value) where:\noption_key::String: The configuration option key, stripped of leading and trailing whitespace.\noption_value::String: The configuration option value, also stripped of leading and trailing whitespace.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.split_blocks-Tuple{Any}","page":"Library","title":"Hamster.split_blocks","text":"split_blocks(lines)\n\nSplits a list of lines into blocks of text based on \"begin\" and \"end\" markers. Each block is encapsulated in a ConfigBlock struct.\n\nArguments\n\nlines: A list of strings, where each string is a line from the input text.\n\nReturns\n\nA list of ConfigBlock instances, each containing the header and content of a block found in the input lines.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.Config","page":"Library","title":"Hamster.Config","text":"(conf::Config)(key, typekey=\"none\")\n\nRetrieve a value associated with a given key from conf. If a typekey is provided and exists in the blocks dictionary, it retrieves the value from the corresponding block.  If no typekey is provided or it is set to \"none\", it retrieves the value from the options dictionary.\n\nArguments\n\nconf::Config: The Config instance to query.\nkey: The key to look up in the Config instance.\ntypekey (optional): The key for the block in the blocks dictionary to look up the value. Defaults to \"none\".\n\nReturns\n\nThe value associated with the key in the options dictionary if typekey is \"none\" and the key exists.\nThe value associated with the key in the specified block of the blocks dictionary if typekey is provided and exists, and the key exists in that block.\nThe string \"default\" if the key does not exist in the relevant dictionary or block.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Config-2","page":"Library","title":"Hamster.Config","text":"struct Config\n\nA configuration structure that holds options and blocks of tags in dictionaries.\n\nFields\n\noptions::Dict{String, String}: A dictionary holding configuration options.\nblocks::Dict{String, Dict{String, String}}: A dictionary holding configuration blocks.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Hamster.Config-3","page":"Library","title":"Hamster.Config","text":"(conf::Config)(keys::Vector{String}, typekey=\"none\")\n\nMakes the Config instance callable with a vector of keys to retrieve corresponding values.  If a typekey is provided and exists in the blocks dictionary, it retrieves the values from the corresponding block.  If no typekey is provided or it is set to \"none\", it retrieves the values from the options dictionary.\n\nArguments\n\nconf::Config: The Config instance to query.\nkeys::Vector{String}: A vector of keys to look up in the Config instance.\ntypekey (optional): The key for the block in the blocks dictionary to look up the values. Defaults to \"none\".\n\nReturns\n\nA vector of values corresponding to the provided keys. \nIf typekey is \"none\" and the key exists in the options dictionary, the value from the options dictionary is returned.\nIf typekey is provided and exists in the blocks dictionary, and the key exists in that block, the value from the block is returned.\nIf the key does not exist in the relevant dictionary or block, the string \"default\" is returned for that key.\n\n\n\n\n\n","category":"type"},{"location":"library/library/#Base.get-Union{Tuple{T}, Tuple{Config, Any, T}} where T","page":"Library","title":"Base.get","text":"Base.get(conf::Config, key, default::T) :: T where {T}\n Base.get(conf::Config, key, typekey, default::T) :: T where {T}\n\nRetrieve a value associated with key (and typekey) from a configuration object conf. If the value returned by conf(key) is \"default\", the fallback value default is returned instead.\n\nArguments\n\nconf::Config: A configuration object, typically implementing callable behavior for key lookups.\nkey: The key to look up in the configuration. Its type depends on the Config implementation.\ndefault::T: A fallback value of type T to return if the configuration value for key is \"default\".\n\nReturns\n\n::T: The value associated with key in conf, unless that value is \"default\", in which case default is returned.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Base.haskey-Tuple{Config, Any}","page":"Library","title":"Base.haskey","text":"haskey(conf::Config, key)\n\nChecks if a given key exists in either the options or blocks dictionary of a Config instance.\n\nArguments\n\nconf::Config: The Config instance to check.\nkey: The key to check for existence.\n\nReturns\n\nBool: true if the key exists in either the options or blocks dictionary, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.check_parse-Tuple{Any, Any}","page":"Library","title":"Hamster.check_parse","text":"check_parse(type, line)\n\nCheck if the string or vector of strings line can be converte to type.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.convert_value-Tuple{Any}","page":"Library","title":"Hamster.convert_value","text":"convert_value(value::String)\n\nAttempts to convert a string value into its most appropriate data type among Int64, Float64, and Bool. If the string represents a valid value for one of these types, it is parsed and returned as that type. If not, the original string is returned.\n\nArguments:\n\nvalue::String: The string representation of a value to be converted.\n\nReturns:\n\nThe converted value in its most appropriate type (either Int64, Float64, or Bool), or the original string if it cannot be converted.\n\nBehavior:\n\nThe function splits the input value based on spaces into components using split_line(value, char=' ').\nIt then attempts to parse these components into Int64, Float64, and Bool types.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.get_empty_config-Tuple{}","page":"Library","title":"Hamster.get_empty_config","text":"get_empty_config()\n\nReturns an empty Config instance.\n\nReturns\n\nConfig: An empty Config instance with empty options and blocks dictionaries.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.set_value!-Tuple{Config, Any, Any, Any}","page":"Library","title":"Hamster.set_value!","text":"set_value!(conf::Config, key, typekey, value)\n\nSets the value of a given key in the specified block of the blocks dictionary of a Config instance. If the block does not exist, it creates a new block with the given key-value pair. Keys are always stored in lowercase.\n\nArguments\n\nkey: The key to set in the specified block.\ntypekey: The key for the block in which the key-value pair should be set.\nvalue: The value to set for the specified key.\nconf::Config: The Config instance where the key-value pair should be set.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.set_value!-Tuple{Config, Any, Any}","page":"Library","title":"Hamster.set_value!","text":"set_value!(conf::Config, key, value)\n\nSets the value of a given key in the options dictionary of a Config instance.\n\nArguments\n\nkey: The key for which the value needs to be set.\nvalue: The value to set for the specified key.\nconf::Config: The Config instance where the key-value pair should be set.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Output","page":"Library","title":"Output","text":"","category":"section"},{"location":"library/library/#Hamster.append_output_block-Tuple{Any, Any, Any}","page":"Library","title":"Hamster.append_output_block","text":"append_output_block(block_title, block_tags, block_values; filename=\"hamster.out\")\n\nAppend a formatted block of output to the specified file, typically used for logging or report generation.\n\nArguments\n\nblock_title::AbstractString: The title of the block to be appended. This title will be written as a header.\nblock_tags::AbstractVector{<:AbstractString}: A vector of tags or labels corresponding to the block's values.\nblock_values::AbstractVector{<:Any}: A vector of values corresponding to the tags, representing the content to be written.\nfilename::AbstractString: The name of the file to which the block will be appended. Defaults to \"hamster.out\".\n\nUsage\n\nThis function checks if the specified file exists. If it does, it appends a titled block of information with tags and corresponding values.\nEach tag-value pair is written on a new line using the write_output_line function.\nA separator line is written after the block for clarity.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.append_output_line-Tuple{Any, Any}","page":"Library","title":"Hamster.append_output_line","text":"write_output_line(key, value, L)\n\nAppend a line with key and value pair to the output file dyntb.out.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.clear_hamster_output-Tuple{}","page":"Library","title":"Hamster.clear_hamster_output","text":"clear_hamster_output(; output_files=[\"hamster_out.h5\", \"hamster.out\", \"Es.dat\", \"vs.dat\"])\n\nDelete output files generated by Hamster.\n\nKeyword Arguments\n\noutput_files::Vector{String}: List of filenames to remove. Defaults to [\"hamster_out.h5\", \"hamster.out\", \"Es.dat\", \"vs.dat\"].\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.generate_output","page":"Library","title":"Hamster.generate_output","text":"generate_output(conf::Config)\n\nGenerates the main output file hamster.out with initial run information.\n\nArguments\n\nconf::Config: A configuration object containing parameters and settings for the current run.\n\nDetails\n\nThis function performs the following tasks:\n\nOpens (creates) the file hamster.out for writing.\nWrites the current date and time to the file to record when the Hamster run started.\nWrites the list of unique hostnames.\n\n\n\n\n\n","category":"function"},{"location":"library/library/#Hamster.write_output_line-Tuple{Any, Any, Any}","page":"Library","title":"Hamster.write_output_line","text":"write_output_line(dyntb_out, key, value, L)\n\nWrite a line with key and value pair to the output file dyntb_out.\n\n\n\n\n\n","category":"method"},{"location":"library/library/#Hamster.write_separator-Tuple{Any}","page":"Library","title":"Hamster.write_separator","text":"write_separator(hamster_out)\n\nWrite a separator line of L times charto theio_stream`.\n\nArguments\n\nio_stream::IO: The io stream to which the separator will be written.\n\n\n\n\n\n","category":"method"},{"location":"#Hamster.jl","page":"Home","title":"Hamster.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Hamiltonian-learning Approach for Multiscale Simulations using a Transferable and Efficient Representation","category":"page"},{"location":"","page":"Home","title":"Home","text":"Hamster.jl is a pure-Julia package for fitting and running effective Hamiltonians to study temperature-dependent optoelectronic properties. Originally created by Martin Schwade and developed by the TheoFEM group at TU Munich (Prof. D. A. Egger), it implements a Δ-machine-learning approach to correct tight-binding Hamiltonians in response to changes in the atomic environment. Spin–orbit coupling (SOC) is supported.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Since Hamster.jl is not (yet) a registered Julia package, we provide an installation script that sets up dependencies, sets the PATH variable and creates the hamster executable.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia hamster_install.jl [--add_path yes/no] [--exec_name hamster] [--bashrc default] [--add_test_exec]","category":"page"},{"location":"#Quickstart","page":"Home","title":"Quickstart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can run start Hamster by calling the hamster executable. To make use of MPI parallelization you need add mpiexecjl or srun in front.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[mpiexecjl -n NODES / srun] hamster [kwargs]","category":"page"},{"location":"","page":"Home","title":"Home","text":"While keyword arguments can be passed directly via the command line, it is more practical to provide Hamster with a config file hconf. Examples can be found here.","category":"page"},{"location":"conf/block_tags/#Config-Blocks","page":"Config Blocks","title":"Config Blocks","text":"","category":"section"},{"location":"conf/block_tags/","page":"Config Blocks","title":"Config Blocks","text":"Each block in the config file is structured as:","category":"page"},{"location":"conf/block_tags/","page":"Config Blocks","title":"Config Blocks","text":"begin BLOCK_LABEL\n    ...\nend","category":"page"},{"location":"conf/block_tags/","page":"Config Blocks","title":"Config Blocks","text":"Tags placed outside their designated blocks are ignored. The following blocks are available:","category":"page"},{"location":"conf/block_tags/#Atom-tags","page":"Config Blocks","title":"Atom tags","text":"","category":"section"},{"location":"conf/block_tags/#Hamster.get_alpha-Tuple{Config, Any}","page":"Config Blocks","title":"Hamster.get_alpha","text":"alpha=0.7*Z\n\nThe alpha::Float value determines how rapid the orbital overlap for a specific ion type falls off with distance. Defaults to 70% of the core charge.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_n-Tuple{Config, Any}","page":"Config Blocks","title":"Hamster.get_n","text":"n=n_period\n\nThe n::Int value determines the order of the polynomial that is used to model the distance dependence the orbital overlap for a specific ion type. Defaults to the period the atom species belongs to.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_nnaxes-Tuple{Config, Any}","page":"Config Blocks","title":"Hamster.get_nnaxes","text":"nnaxes=false\n\nIf nnaxes::Bool=true, the orbital axes are rotated along the connecting vectors with the nearest neighbors of the respective orbitals. The number of nearest neighbors depends on the number of orbitals.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Supercell","page":"Config Blocks","title":"Supercell","text":"","category":"section"},{"location":"conf/block_tags/#Hamster.get_Nconf-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_Nconf","text":"Nconf=10\n\nThe Nconf tag sets the number of samples that are sampled from the total number of configuration.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_Nconf_max-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_Nconf_max","text":"Nconf_max=1\n\nThe Nconf_max tag sets the maximum index that can be sampled from the total number of configurations.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_Nconf_min-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_Nconf_min","text":"Nconf_min=10\n\nThe Nconf_min tag sets the minimum index that can be sampled from the total number of configurations.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_config_inds-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_config_inds","text":"config_inds=none\n\nThe config_inds tag sets a file from which configuration indices are read. By default, indices are not read from file. It is also possible to provide a list of integers directly.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_nbatch-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_nbatch","text":"nbatch=1\n\nThe nbatch tag detemines into how many batches the training structures are split for stochastic gradient optimization.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_sc_poscar-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_sc_poscar","text":"sc_poscar=SC_POSCAR\n\nThe sc_poscar tag sets the path to the POSCAR file used for the supercell.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_val_config_inds-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_val_config_inds","text":"config_inds=none\n\nThe config_inds tag sets a file from which configuration indices are read. By default, indices are not read from file. It is also possible to provide a list of integers directly.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_xdatcar-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_xdatcar","text":"xdatcar=XDATCAR\n\nThe xdatcar tag sets the path to the XDATCAR file.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#ML","page":"Config Blocks","title":"ML","text":"","category":"section"},{"location":"conf/block_tags/#Hamster.get_apply_distance_distortion-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_apply_distance_distortion","text":"apply_distance_distortion=false\n\nIf true, distortions are applied to atomic positions in calculating atomic distance in ML descriptor.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_apply_distortion-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_apply_distortion","text":"apply_distortion=false\n\nIf true, distortions are applied to atomic positions in calculating descriptor values.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_env_scale-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_env_scale","text":"env_scale=1.\n\nSets the scaling factor that is multiplied with the environmental descriptor.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_ml_filename-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_ml_filename","text":"filename=ml_params\n\nThe filename tag sets the name for the parameter file of the ML model.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_ml_init_params-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_ml_init_params","text":"init_params=zeros\n\nThe init_params tag determines how the parameters of the ML model are initialized.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_ml_model-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_ml_model","text":"ml_model=false\n\nThe ml_model tag switches on the use of an ML model in the effective Hamiltonian.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_ml_ncluster-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_ml_ncluster","text":"ncluster=1\n\nSets the number of clusters to be used in the kmeans clustering.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_ml_npoints-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_ml_npoints","text":"npoints=1\n\nSets the number of data points that are sampled in total.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_ml_rcut-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_ml_rcut","text":"ml_rcut=rcut\n\nSets the cut-off radius for the ML model. Defaults to the same cut-off radius as the TB model.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_ml_sampling-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_ml_sampling","text":"sampling=random\n\nThe sampling tag determines how points are selected from each cluster. Defaults to \"random\".\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_ml_update-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_ml_update","text":"update=true\n\nThe update tag switches on/off optimization of ML parameters.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_sim_params-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_sim_params","text":"sim_params=0.1\n\nSets the parameter for the similarity function of the kernel model.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_strc_scale-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_strc_scale","text":"strc_scale=1.\n\nSets the scaling factor that is multiplied with the structural descriptor entries.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#SOC","page":"Config Blocks","title":"SOC","text":"","category":"section"},{"location":"conf/block_tags/#Hamster.get_soc-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_soc","text":"soc=false\n\nA model to account for spin-orbit coupling (SOC) is constructed if a block SOC is present in the config file.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_soc_init_params-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_soc_init_params","text":"init_params=zeros\n\nThe init_params tag determines how SOC parameters are initialized.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_update_soc-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_update_soc","text":"update_soc=true\n\nThe update_soc tag determines whether the SOC parameters are udpated.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#optim-tags","page":"Config Blocks","title":"Optim","text":"","category":"section"},{"location":"conf/block_tags/#Hamster.get_band_weights-Tuple{Config, Any}","page":"Config Blocks","title":"Hamster.get_band_weights","text":"wE=ones\n\nThe wE tag sets the weight of each energy band for the calculation of the loss. Individual weights can also be set with, e.g., wE_3 = 2.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_bandmin-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_bandmin","text":"bandmin=1\n\nThe bandmin tag sets the index of the lowest band that is included in the fitting.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_barrier-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_barrier","text":"barrier=0.\n\nThe barrier parameter determines at which magnitude the regularization kicks in.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_eig_fit-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_eig_fit","text":"eig_fit=true (false if hr_fit)\n\nThe eig_fit tag switches on fitting the effective Hamiltonian to eigenvalue data. If both hr_fit and eig_fit are true, the model is first fit to Hamiltonian data and then to eigenvalue data.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_eig_val-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_eig_val","text":"eig_val=eig_fit\n\nThe eig_val tag switches on validating the effective Hamiltonian model with eigenvalue data.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_hr_fit-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_hr_fit","text":"hr_fit=false\n\nThe hr_fit tag switches on fitting the effective Hamiltonian model to Hamiltonian data.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_kpoint_weights-Tuple{Config, Any}","page":"Config Blocks","title":"Hamster.get_kpoint_weights","text":"wk=ones\n\nThe wk tag sets the weight of each kpoint for the calculation of the loss. Individual weights can also be set with, e.g., wk_3 = 2.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_lambda-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_lambda","text":"lambda=0.\n\nThe lambda parameter determines the regularization constant.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_loss-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_loss","text":"loss=MAE\n\nThe loss tag sets the loss function to be used for the optimization.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_lr-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_lr","text":"lr=0.1\n\nThe lr parameter defines the learning rate for the gradient descent parameter optimization.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_lreg-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_lreg","text":"lreg=2\n\nThe lreg tag determines which norm is used to calculate the regularization, e.g., L2 for lreg=2.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_niter-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_niter","text":"niter=1\n\nThe niter parameter sets the maximum number of iterations (through the training data set).\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_printeachbatch-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_printeachbatch","text":"printeachbatch=false (true if verbosity > 1)\n\nThe printeachbatch tag switches on printing profiler information at every batch.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_printeachiter-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_printeachiter","text":"printeachiter=1\n\nThe printeachiter tag determines at what iteration interval profiler information is printed.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_train_data-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_train_data","text":"train_data=EIGENVAL\n\nThe train_data tag sets the path (filename) that contains the training data.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_train_mode-Tuple{Any}","page":"Config Blocks","title":"Hamster.get_train_mode","text":"train_mode=PC\n\nThe train_mode flag switches between different optimization modes (PC, MD, mixed, multi; not case sensitive).\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_update_tb-Tuple{Config, Any}","page":"Config Blocks","title":"Hamster.get_update_tb","text":"update_tb=haskey(conf, \"Optimizer\")\n\nThe update_tb tag determines whether/which parameters of the TB model are updated during the optimization. Defaults to true if an Optimizer block is provided.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_val_bandmin-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_val_bandmin","text":"val_bandmin=1\n\nThe bandmin tag sets the index of the lowest band that is included in the validation.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_val_data-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_val_data","text":"val_data=EIGENVAL\n\nThe val_data tag sets the path (filename) that contains the validation data.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_val_mode-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_val_mode","text":"val_mode=PC\n\nThe val_mode flag switches between different modes for model validation (PC, MD, mixed, multi; not case sensitive).\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_val_ratio-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_val_ratio","text":"val_ratio=0.2 (if validate; 0 else)\n\nThe val_ratio tag sets the ratio between the training set size and the validation set size.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_val_weights-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_val_weights","text":"val_weights=false\n\nIf val_weights is true, the same weights are used for the validation loss as for the training loss.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_valeachiter-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_valeachiter","text":"valeachiter=1\n\nThe valeachiter tag determines at what iteration interval a validation step is performed.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_validate-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_validate","text":"validate=false (true if `val_mode` is set)\n\nThe validate tag switches on model validation.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#hyperopt-tags","page":"Config Blocks","title":"HyperOpt","text":"","category":"section"},{"location":"conf/block_tags/#Hamster.get_hyperopt_lowerbounds-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_hyperopt_lowerbounds","text":"lowerbounds=[0]\n\nThe lowerbounds::Vector{Float} define the lower bounds of the search space.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_hyperopt_mode-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_hyperopt_mode","text":"mode = random\n\nThe mode::String tag specifies the strategy for generating new hyperparameter candidates.   The default is random.\n\nPossible options:\n\nrandom: random search (default)\ngrid: grid search\ntpe: Tree-structured Parzen Estimator\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_hyperopt_niter-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_hyperopt_niter","text":"niter=10\n\nThe niter::Int tags sets the maximum number of iterations in the hyperparameter optimization.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_hyperopt_params-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_hyperopt_params","text":"params=[\"\"]\n\nThe params tag defines the hyperparameters to be optimized.   For parameters belonging to a specific block, use the syntax block_param.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_hyperopt_stepsizes-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_hyperopt_stepsizes","text":"stepsizes=[1e-5]\n\nThe stepsizes::Vector{Float} defines the minimum difference between two points that are sampled as trial hyperparameters.\n\n\n\n\n\n","category":"method"},{"location":"conf/block_tags/#Hamster.get_hyperopt_upperbounds-Tuple{Config}","page":"Config Blocks","title":"Hamster.get_hyperopt_upperbounds","text":"upperbounds=[0]\n\nThe upperbounds::Vector{Float64} define the upper bounds of the search space.\n\n\n\n\n\n","category":"method"},{"location":"conf/config/#man-config","page":"Main Input File","title":"Main Input File","text":"","category":"section"}]
}
